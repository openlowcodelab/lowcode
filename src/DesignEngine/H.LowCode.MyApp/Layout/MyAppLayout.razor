@namespace H.LowCode.MyApp
@inherits LowCodeLayoutComponentBase

@inject IHttpClientFactory HttpClientFactory
@inject ComponentStateWrapper<MyAppLayout, MenuDataItem[]> MenuDataState
@inject ComponentStateWrapper<AppSchema, AppSchema> AppSchemaState

<link href="@Assets["_content/H.LowCode.MyApp/myapp.css"]" rel="stylesheet" />

@if (AppSchemaState.Value != null)
{
    <CascadingValue Value="@AppSchemaState.Value" Name="appCascading">
        <AntDesign.ProLayout.BasicLayout FixedHeader="true" Class="myapp" Logo="@("logo.png")" Title="@AppSchemaState.Value.Name"
                MenuData="@MenuDataState.Value" MenuAccordion="true" Layout="AntDesign.ProLayout.Layout.Side">
            <RightContentRender>
                RightContent
            </RightContentRender>
            <ChildContent>
                @Body
            </ChildContent>
            <FooterRender></FooterRender>
        </AntDesign.ProLayout.BasicLayout>
        <SettingDrawer />
    </CascadingValue>
}

@code
{
    protected override async Task OnInitializedAsync()
    {
        if (MenuDataState.Value is null)
        {
            string appid = base.GetAppId();
            AppSchemaState.Value = await GetAppSchemaAsync(appid);
            MenuDataState.Value = InitMenuData(appid);

            await base.OnInitializedAsync();
        }
    }

    private async Task<AppSchema> GetAppSchemaAsync(string appId)
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = base.GetBaseUri();

        var pageSchema = await httpClient.GetFromJsonAsync<AppSchema>($"api/designer/getapp?appId={appId}");
        return pageSchema;
    }

    private MenuDataItem[] InitMenuData(string appId)
    {
        MenuDataItem[] menuData = [
            new MenuDataItem
            {
                Path = $"/myapp/{appId}/pagemanager",
                Name = "页面管理",
                Icon = "profile",
                Key = "page"
            },
        new MenuDataItem
            {
                Path = $"/myapp/{appId}/menumanager",
                Name = "菜单管理",
                Icon = "menu",
                Key = "menu"
            },
        new MenuDataItem
            {
                Path = $"/myapp/{appId}/datasource",
                Name = "数据源",
                Icon = "database",
                Key = "datasource"
            },
        new MenuDataItem
            {
                Path = $"/myapp/{appId}/integration",
                Name = "集成",
                Icon = "api",
                Key = "integration"
            },
        new MenuDataItem
            {
                Path = $"/myapp/{appId}/autoflow",
                Name = "自动化",
                Icon = "deployment-unit",
                Key = "autoflow"
            },
        new MenuDataItem
            {
                Path = $"/myapp/{appId}/publish",
                Name = "应用发布",
                Icon = "cloud-upload",
                Key = "publish"
            },
        new MenuDataItem
            {
                Path = $"/myapp/{appId}/appsettings",
                Name = "应用设置",
                Icon = "setting",
                Key = "appsettings"
            }
        ];
        return menuData;
    }
}