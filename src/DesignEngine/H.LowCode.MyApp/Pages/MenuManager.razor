@page "/myapp/{AppId}/menumanager"
@namespace H.LowCode.MyApp
@inherits DesignEngineLowCodePageComponentBase
@layout MyAppLayout

@inject IMenuAppService MenuAppService
@inject ComponentState<MenuManager, IList<MenuSchema>> MenuListState

<PageTitle>菜单管理</PageTitle>

<div style="display: flex; justify-content: space-between; margin: 0 0 8px 0;">
    <div style="width:250px;">
        <Search Placeholder="菜单名称" OnSearch="()=>{}" />
    </div>
    <div style="width:80px; line-height:32px; margin: 0 8px 0 0;">
        <Button Type="@ButtonType.Primary" OnClick="@(()=> CreateAsync(string.Empty))">新建菜单</Button>
    </div>
</div>

<Table TItem="MenuSchema" TreeChildren="item=>item.Childrens" DataSource="@_menuList" @bind-SelectedRows="selectedRows"
RowKey="x=>x.Id" HidePagination DefaultExpandAllRows>
    <PropertyColumn Title="菜单名称" Property="c=>c.Title" Format="yyyy-MM-dd" Sortable />
    <PropertyColumn Title="排序" Property="c=>c.Order" />
    <PropertyColumn Title="图标" Property="c=>c.Icon" />
    <PropertyColumn Title="类型" Property="c=>c.MenuType" Format="@(context.MenuType == 0 ?"菜单":"目录")" />
    <PropertyColumn Title="菜单地址" Property="c=>c.MenuUrl" />
    <PropertyColumn Title="修改时间" Property="c=>c.ModifiedTime" Format="yyyy-MM-dd HH:mm:ss" />
    <ActionColumn Title="操作" Width="200">
        <Space Size=@("middle")>
            @if(context.MenuType == 1)
            {
                <SpaceItem>
                    <a onclick="@(()=> CreateAsync(@context.Id))">新增子菜单</a>
                </SpaceItem>
            }
            <SpaceItem>
                <a onclick="@(()=> EditAsync(@context.Id))">编辑</a>
            </SpaceItem>
            <SpaceItem>
                <a onclick="@(()=> DeleteAsync(@context.Id))" style="color:#ff4d4f">删除</a>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="新建菜单" @bind-Visible="@_visible" OnOk="OnConfirmAsync">
    <Form Model="@_menuSchema" LabelColSpan="8" WrapperColSpan="16" OnFinish="OnFinishAsync" @ref="@_form"
    ValidateOnChange="true">
        @if (context.ParentId.IsNullOrEmpty() == false)
        {
            <FormItem Label="父级Id" Required>
                <Input @bind-Value="@context.ParentId" Disabled />
            </FormItem>
        }
        <FormItem Label="菜单名称" Required>
            <Input @bind-Value="@context.Title" />
        </FormItem>
        <FormItem Label="类型" Required>
            <RadioGroup @bind-Value="@context.MenuType">
                <Radio Value="0">菜单</Radio>
                <Radio Value="1">目录</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem Label="图标" Required>
            <Input @bind-Value="@context.Icon" />
        </FormItem>
        @if (context.MenuType == 0)
        {
            <FormItem Label="菜单地址" Required>
                <Input @bind-Value="@context.MenuUrl" />
            </FormItem>
        }
        <FormItem Label="排序">
            <InputNumber @bind-Value="@context.Order" Min="0" DefaultValue="0"></InputNumber>
        </FormItem>
    </Form>
</Modal>

@code {
    [Parameter]
    public string AppId { get; set; }

    IEnumerable<MenuSchema> selectedRows;

    private bool _visible = false;
    private Form<MenuSchema> _form;

    private IList<MenuSchema> _menuList;
    private MenuSchema _menuSchema = new MenuSchema();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _menuList = await MenuListState.GetOrAddAsync(this, async () =>
        {
            return await GetMenuListAsync();
        });
    }

    public async Task<IList<MenuSchema>> GetMenuListAsync()
    {
        return await MenuAppService.GetListAsync(AppId);
    }

    private async Task<MenuSchema> GetMenuAsync(string id)
    {
        return await MenuAppService.GetByIdAsync(AppId, id);
    }

    private void CreateAsync(string parentId)
    {
        _menuSchema = new MenuSchema();
        _menuSchema.AppId = AppId;
        _menuSchema.ParentId = parentId;
        _visible = true;

        StateHasChanged();
    }

    private async Task EditAsync(string id)
    {
        _menuSchema = await GetMenuAsync(id);
        _visible = true;

        StateHasChanged();
    }

    private async Task DeleteAsync(string id)
    {
        await MenuAppService.DeleteAsync(AppId, id);

        await Message.Success("删除成功！");
    }

    private async Task OnConfirmAsync(MouseEventArgs e)
    {
        var validate = _form.Validate();
        if (validate)
        {
            var isSuccess = await SaveMenuSchemaAsync();
            if (isSuccess)
            {
                _visible = false;
                _form.Submit();
                await Message.Success("保存成功");
                _form.Reset();
            }
            else
            {
                _visible = true;
                await Message.Error("保存失败");
            }
        }
        else
        {
            _visible = true;
        }
    }

    private async Task OnFinishAsync()
    {
        _menuList = await GetMenuListAsync();
    }

    private async Task<bool> SaveMenuSchemaAsync()
    {
        return await MenuAppService.SaveAsync(_menuSchema);
    }
}