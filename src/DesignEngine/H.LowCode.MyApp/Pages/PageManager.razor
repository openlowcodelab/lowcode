@page "/myapp/{AppId}/pagemanager"
@namespace H.LowCode.MyApp
@inherits DesignEngineLowCodePageComponentBase
@layout MyAppLayout

@inject IPageAppService PageAppService
@inject ComponentState<PageManager, IList<PageListModel>> PageListState

<PageTitle>页面管理</PageTitle>

<div style="display: flex; justify-content: space-between; margin: 0 0 8px 0;">
    <div style="width:250px;">
        <Search Placeholder="页面名称" OnSearch="()=>{}" />
    </div>
    <div style="width:80px; line-height:32px; margin: 0 8px 0 0;">
        <Button Type="@ButtonType.Primary" OnClick="@(()=> CreateAsync(string.Empty))">新建页面</Button>
    </div>
</div>

<Table TItem="PageListModel" DataSource="@_pageList" PageSize="15" PageIndex="1" Total="_total"
@bind-SelectedRows="selectedRows" Style="height:100%;" RowKey="c=>c.PageId">
    <PropertyColumn Title="ID" Property="c=>c.PageId" />
    <PropertyColumn Title="页面名称" Property="c=>c.PageName" Sortable />
    <PropertyColumn Title="排序" Property="c=>c.Order" />
    <PropertyColumn Title="类型" Property="c=>c.PageType" Sortable />
    <PropertyColumn Title="修改时间" Property="c=>c.ModifiedTime" Format="yyyy-MM-dd HH:mm:ss" />
    <PropertyColumn Title="发布状态" Property="c=>c.PublishStatus">
        <Tag Color="@(context.PublishStatus == 1 ? "Green" : "Gold")">
            @(context.PublishStatus == 1 ? "已发布" : "待发布")
        </Tag>
    </PropertyColumn>
    <ActionColumn Title="操作" Width="180">
        <Space Size=@("middle")>
            <SpaceItem>
                <a href="@($"/designer/{AppId}/{context.PageId}")" target="_blank" style="padding: 7px;border: solid #b7eb8f 1px;border-radius: 2px;line-height: 11px;height: 26px;display: block;background-color: #f6ffed;color: #389e0d;">设计</a>
            </SpaceItem>
            <SpaceItem>
                <a onclick="@(()=> EditAsync(@context.PageId))">编辑</a>
            </SpaceItem>
            <SpaceItem>
                <a onclick="@(()=> DeleteAsync(@context.PageId))" style="color:#ff4d4f">删除</a>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="新建页面" @bind-Visible="@_visible" OnOk="OnConfirmAsync">
    <Form Model="@_pageSchema" LabelColSpan="8" WrapperColSpan="16" OnFinish="OnFinishAsync" @ref="@_form"
    ValidateOnChange="true">
        <FormItem Label="页面名称" Required>
            <Input @bind-Value="@context.Name" />
        </FormItem>
        <FormItem Label="类型" Required>
            <EnumRadioGroup TEnum="PageTypeEnum" @bind-Value="@context.PageType" Name="radio_pageType"></EnumRadioGroup>
        </FormItem>
        @if (context.PageType == PageTypeEnum.Form)
        {
            <FormItem Label="数据源类型" Required>
                <EnumRadioGroup TEnum="PageDataSourceTypeEnum" DefaultValue="PageDataSourceTypeEnum.DB" @bind-Value="@context.DataSource.DataSourceType" Name="radio_datasourcetype"></EnumRadioGroup>
            </FormItem>

            @if (context.DataSource.DataSourceType == PageDataSourceTypeEnum.DB)
            {
                <FormItem Label="表" Required>
                    <Input TValue="string" @bind-value="@context.DataSource.DataSourceValue" />
                </FormItem>
            }
            else if (context.DataSource.DataSourceType == PageDataSourceTypeEnum.API)
            {
                <FormItem Label="API" Required>
                    
                </FormItem>
            }
        }
        <FormItem Label="发布状态" Required>
            <RadioGroup @bind-Value="@context.PublishStatus">
                <Radio Value="0">待发布</Radio>
                <Radio Value="1">已发布</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem Label="排序">
            <InputNumber @bind-Value="@context.Order" Min="0" DefaultValue="0"></InputNumber>
        </FormItem>
    </Form>
</Modal>

@code {
    [Parameter]
    public string AppId { get; set; }

    IEnumerable<PageListModel> selectedRows;
    int _total = 0;

    private bool _visible;
    private Form<PagePartsSchema> _form;
    private IList<PageListModel> _pageList;
    private PagePartsSchema _pageSchema = new PagePartsSchema();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _total = 50;
        _pageList = await PageListState.GetOrAddAsync(this, async () =>
        {
            return await LoadPagesAsync(1, 50);
        });
    }

    private async Task<IList<PageListModel>> LoadPagesAsync(int pageIndex, int pageSize)
    {
        return await PageAppService.GetListAsync(AppId);
    }

    private async Task<PagePartsSchema> GetPageAsync(string pageId)
    {
        return await PageAppService.GetByIdAsync(AppId, pageId);
    }

    private void CreateAsync(string parentId)
    {
        _pageSchema = new PagePartsSchema();
        _pageSchema.AppId = AppId;
        _visible = true;

        StateHasChanged();
    }

    private async Task EditAsync(string id)
    {
        _pageSchema = await GetPageAsync(id);
        _visible = true;

        StateHasChanged();
    }

    private async Task DeleteAsync(string pageId)
    {
        await PageAppService.DeleteAsync(AppId, pageId);

        await Message.Success("删除成功！");
    }

    private async Task OnConfirmAsync(MouseEventArgs e)
    {
        var validate = _form.Validate();
        if (validate)
        {
            var isSuccess = await SavePageSchemaAsync();
            if (isSuccess)
            {
                _visible = false;
                _form.Submit();
                await Message.Success("保存成功！");
                _form.Reset();
            }
            else
            {
                _visible = true;
                await Message.Error("保存失败");
            }
        }
        else
        {
            _visible = true;
        }
    }

    private async Task OnFinishAsync()
    {
        _pageList = await LoadPagesAsync(1, 50);
    }

    private async Task<bool> SavePageSchemaAsync()
    {
        return await PageAppService.SaveAsync(_pageSchema);
    }
}