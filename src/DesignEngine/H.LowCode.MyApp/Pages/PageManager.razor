@page "/myapp/{AppId}/pagemanager"
@namespace H.LowCode.MyApp
@layout MyAppLayout

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IMessageService Message
@inject ComponentStateWrapper<PageManager, IList<PageListModel>> PageListState

<PageTitle>页面管理</PageTitle>

<div style="display: flex; justify-content: space-between; margin: 0 0 8px 0;">
    <div style="width:250px;">
        <Search Placeholder="页面名称" OnSearch="()=>{}" />
    </div>
    <div style="width:80px; line-height:32px; margin: 0 8px 0 0;">
        <Button Type="@ButtonType.Primary" OnClick="@(()=> CreateAsync(string.Empty))">新建页面</Button>
    </div>
</div>

<Table TItem="PageListModel" DataSource="@PageListState.Value" PageSize="15" PageIndex="1" Total="_total"
       @bind-SelectedRows="selectedRows" Style="height:100%;" RowKey="c=>c.PageId">
    <PropertyColumn Title="ID" Property="c=>c.PageId" Width="300" />
    <PropertyColumn Title="页面名称" Property="c=>c.PageName" Sortable />
    <PropertyColumn Title="排序" Property="c=>c.Order" />
    <PropertyColumn Title="类型" Property="c=>c.PageType" Sortable />
    <PropertyColumn Title="发布状态" Property="c=>c.PublishState">
        @if(context.PublishState == 0)
        {
            <Tag Color="default">待发布</Tag>
        }
        else
        {
            <Tag Color="green">已发布</Tag>
        }
    </PropertyColumn>
    <PropertyColumn Title="修改时间" Property="c=>c.ModifiedTime" Format="yyyy-MM-dd HH:mm:ss" />
    <ActionColumn Title="操作" Width="180">
         <Space Size=@("middle")>
             <SpaceItem>
                <a href="@($"/designer/{AppId}/{context.PageId}")" target="_blank" style="padding: 7px;border: solid #b7eb8f 1px;border-radius: 2px;line-height: 11px;height: 26px;display: block;background-color: #f6ffed;color: #389e0d;">设计</a>
            </SpaceItem>
            <SpaceItem>
                <a onclick="@(()=> EditAsync(@context.PageId))">编辑</a>
            </SpaceItem>
            <SpaceItem>
                <a onclick="@(()=> DeleteAsync(@context.PageId))" style="color:#ff4d4f">删除</a>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="新建页面" @bind-Visible="@_visible" OnOk="OnConfirmAsync">
    <Form Model="@_pageSchema" LabelColSpan="8" WrapperColSpan="16" OnFinish="OnFinishAsync" @ref="@_form"
          ValidateMode="@FormValidateMode.Complex" ValidateOnChange="true">
        <FormItem Label="页面名称" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <Input @bind-Value="@context.Name" />
        </FormItem>
        <FormItem Label="类型" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <RadioGroup DefaultValue="PageTypeEnum.Normal" TValue="PageTypeEnum" @bind-Value="@context.PageType">
                <Radio Value="PageTypeEnum.Normal">普通</Radio>
                <Radio Value="PageTypeEnum.Form">表单</Radio>
                <Radio Value="PageTypeEnum.Table">列表</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem Label="发布状态" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <RadioGroup @bind-Value="@context.PublishState">
                <Radio Value="0">待发布</Radio>
                <Radio Value="1">已发布</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem Label="排序">
            <InputNumber @bind-Value="@context.Order" Min="0" DefaultValue="0"></InputNumber>
        </FormItem>
    </Form>
</Modal>

@code {
    [Parameter]
    public string AppId { get; set; }

    IEnumerable<PageListModel> selectedRows;
    int _total = 0;

    private bool _visible = false;
    private Form<PageSchema> _form;
    private PageSchema _pageSchema = new PageSchema();

    protected override async Task OnInitializedAsync()
    {
        _total = 50;
        if (PageListState.Value is null)
        {
            PageListState.Value = await LoadPagesAsync(1, 50);

            await base.OnInitializedAsync();
        }
    }

    private async Task<IList<PageListModel>> LoadPagesAsync(int pageIndex, int pageSize)
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        var result = await httpClient.GetFromJsonAsync<List<PageListModel>>($"api/designengine/getpages?appId={AppId}");
        return result;
    }

    private async Task<PageSchema> GetPageAsync(string pageId)
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        var pageSchema = await httpClient.GetFromJsonAsync<PageSchema>($"api/designengine/getpage?appId={AppId}&pageId={pageId}");
        return pageSchema;
    }

    private void CreateAsync(string parentId)
    {
        _pageSchema = new PageSchema();
        _pageSchema.Id = Guid.NewGuid().ToString();
        _pageSchema.AppId = AppId;
        _visible = true;

        StateHasChanged();
    }

    private async Task EditAsync(string id)
    {
        _pageSchema = await GetPageAsync(id);
        _visible = true;

        StateHasChanged();
    }

    private async Task DeleteAsync(string pageId)
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        await httpClient.GetAsync($"api/designengine/deletepage?appId={AppId}&pageId={pageId}");
        await Message.Success("删除成功！");
    }

    private async Task OnConfirmAsync(MouseEventArgs e)
    {
        var validate = _form.Validate();
        if (validate)
        {
            var result = await SavePageSchemaAsync();
            if (result.StatusCode == HttpStatusCode.OK)
            {
                _visible = false;
                _form.Submit();
                await Message.Success("保存成功！");
                _form.Reset();
            }
            else
            {
                _visible = true;
                await Message.Error($"保存失败: {result.ReasonPhrase}");
            }
        }
        else
        {
            _visible = true;
        }
    }

    private async Task OnFinishAsync()
    {
        PageListState.Value = await LoadPagesAsync(1, 50);
    }

    private async Task<HttpResponseMessage> SavePageSchemaAsync()
    {
        string jsonSchema = _pageSchema.ToJson();

        var content = new StringContent(jsonSchema, Encoding.UTF8, "application/json");

        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);
        var result = await httpClient.PostAsync($"api/designengine/savepage", content);

        return result;
    }
}