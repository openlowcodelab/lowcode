@using H.LowCode.MetaSchema

<div style="height: auto;">
    @for (int r = 0; r < Rows; r++)
    {
        int rr = r;
        <GridRow Style="min-height:85px; height: auto;">
           @for (int c = 0; c < Cols; c++)
           {
                string key = $"container-{rr}-{c}";
                <GridCol Span="@(24/Cols)" Style="width:100%; background-color:#f4f4f4; border: 1px dashed #ded9d9;">
                    <DropItemContainer ParentComponent="@CreatComponent(key)"></DropItemContainer>
                </GridCol>
           }
        </GridRow>
    }
</div>

@code {
    [Parameter]
    public ComponentSchema Component{ get; set; }

    [Parameter]
    public int Rows { get; set; } = 2;

    [Parameter]
    public int Cols { get; set; } = 2;

    private ComponentSchema _component;

    /// <summary>
    /// 本地缓存，避免每次重复创建
    /// </summary>
    private IDictionary<string, ComponentSchema> _childrens = new Dictionary<string, ComponentSchema>();

    #region Init
    protected override void OnInitialized()
    {
        Init();

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            RegisterEventDispatcher();
    }

    private void Init()
    {
        if (_component == null)
            _component = Component.DeepClone();
    }

    private void RegisterEventDispatcher()
    {
        //订阅属性面板中的事件
        BlazorEventDispatcher.RegisterEvent("designengine.propertysetting.onchange", (value) =>
        {
            Rows = Random.Shared.Next(1, 4);
            StateHasChanged();
        });
    }
    #endregion

    private ComponentSchema CreatComponent(string key)
    {
        if (_childrens.ContainsKey(key))
            return _childrens[key];

        var component = _component.DeepClone();
        component.ComponentCategory = ComponentCategory.Container;
        component.ParentId = Component.Id;
        Component.Childrens.Add(component);

        _childrens.Add(key, component);

        return component;
    }
}