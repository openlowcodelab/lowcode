<div style="height: auto;">
    @for (int r = 0; r < Rows; r++)
    {
        int rr = r;
        <GridRow Style="min-height:85px; height: auto;">
           @for (int c = 0; c < Cols; c++)
           {
                string key = $"gridcontainer-{rr}-{c}";
                <GridCol Span="@(24/Cols)" Style="width:100%; background-color:#f4f4f4; border: 1px dashed #ded9d9;">
                    <DropItemContainer ContainerComponent="@CreatComponent(key)"></DropItemContainer>
                </GridCol>
           }
        </GridRow>
    }
</div>

@code {
    [Parameter]
    public ComponentSchema Component{ get; set; }

    [Parameter]
    public int Rows { get; set; }

    [Parameter]
    public int Cols { get; set; }

    /// <summary>
    /// 保存初始的 Component，避免跟随 Component 变化
    /// </summary>
    private ComponentSchema _component;

    #region Init
    protected override void OnInitialized()
    {
        Init();

        base.OnInitialized();
    }

    private void Init()
    {
        if (_component == null)
            _component = Component.CopyNew();
    }
    #endregion

    private ComponentSchema CreatComponent(string key)
    {
        if (Component.Childrens.Count >= (Rows * Cols))
        {
            return Component.Childrens.FirstOrDefault(t =>
            {
                if (t.ComponentProperty.ExtensionData.ContainsKey(key))
                    return true;
                return false;
            });
        }

        var component = _component.CopyNew();
        component.IsContainerComponent = true;
        component.ComponentProperty.ExtensionData.Add(key, key);
        component.ParentId = Component.Id;

        Component.Childrens.Add(component);

        return component;
    }
}