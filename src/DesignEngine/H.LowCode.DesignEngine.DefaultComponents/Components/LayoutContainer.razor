@using H.LowCode.MetaSchema

<Layout Style="height:100%">
    <Sider Style="background: #f4f7fa; height:100%;">
        <DropItemContainer ParentComponent="@CreatComponent("layoutcontainer-sider")"></DropItemContainer>
    </Sider>
    <Content Style="height: 100%;">
        <DropItemContainer ParentComponent="@CreatComponent("layoutcontainer-content")"></DropItemContainer>
    </Content>
</Layout>

@code {
    [Parameter]
    public ComponentSchema Component{ get; set; }

    private ComponentSchema _component;

    /// <summary>
    /// 本地缓存，避免每次重复创建
    /// </summary>
    private IDictionary<string, ComponentSchema> _childrens = new Dictionary<string, ComponentSchema>();

    #region Init
    protected override void OnInitialized()
    {
        Init();

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            RegisterEventDispatcher();
    }

    private void Init()
    {
        if (_component == null)
            _component = Component.DeepClone();
    }

    private void RegisterEventDispatcher()
    {
        //订阅属性面板中的事件
        BlazorEventDispatcher.RegisterEvent("designengine.propertysetting.onchange", (value) =>
        {
            StateHasChanged();
        });
    }
    #endregion

    private ComponentSchema CreatComponent(string key)
    {
        if (_childrens.ContainsKey(key))
            return _childrens[key];

        var component = _component.DeepClone();
        component.ComponentCategory = ComponentCategory.Container;
        component.ParentId = Component.Id;
        Component.Childrens.Add(component);

        _childrens.Add(key, component);
        return component;
    }
}