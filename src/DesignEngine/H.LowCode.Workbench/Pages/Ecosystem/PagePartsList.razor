@namespace H.LowCode.Workbench
@inherits LowCodeComponentBase
@layout WorkbenchLayout

@inject IMessageService Message
@inject ComponentState<PagePartsList, IList<PagePartsSchema>> PagePartsState

<div style="display: flex; justify-content: space-between; margin: 0 0 8px 0;">
    <div style="width:250px;">
        <Search Placeholder="页面名称" OnSearch="()=>{}" />
    </div>
    <div style="width:80px; line-height:32px; margin: 0 8px 0 0;">
        <Button Type="@ButtonType.Primary" OnClick="@(()=> CreateAsync())">新建页面</Button>
    </div>
</div>

<Table TItem="PagePartsSchema" DataSource="@_pagePartsList" PageSize="15" PageIndex="1" Total="_total"
@bind-SelectedRows="selectedRows" Style="height:100%;" RowKey="c=>c.Id">
    <PropertyColumn Title="ID" Property="c=>c.Id" Width="300" />
    <PropertyColumn Title="页面名称" Property="c=>c.Name" Sortable />
    <PropertyColumn Title="排序" Property="c=>c.Order" />
    <PropertyColumn Title="修改时间" Property="c=>c.ModifiedTime" Format="yyyy-MM-dd HH:mm:ss" />
    <PropertyColumn Title="发布状态" Property="c=>c.PublishStatus">
        <Tag Color="@(context.PublishStatus == 1 ? "Green" : "Gold")">
            @(context.PublishStatus == 1 ? "已发布" : "待发布")
        </Tag>
    </PropertyColumn>
    <ActionColumn Title="操作" Width="180">
        <Space Size=@("middle")>
            <SpaceItem>
                <a href="@($"/designer/pageparts/{context.Id}")" target="_blank" style="padding: 7px;border: solid #b7eb8f 1px;border-radius: 2px;line-height: 11px;height: 26px;display: block;background-color: #f6ffed;color: #389e0d;">设计</a>
            </SpaceItem>
            <SpaceItem>
                <a onclick="@(()=> EditAsync(@context.Id))">编辑</a>
            </SpaceItem>
            <SpaceItem>
                <a onclick="@(()=> DeleteAsync(@context.Id))" style="color:#ff4d4f">删除</a>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="新建组件" @bind-Visible="@_visible" OnOk="OnConfirmAsync">
    <Form Model="@_partsSchema" LabelColSpan="8" WrapperColSpan="16" OnFinish="OnFinishAsync" @ref="@_form"
    ValidateOnChange="true">
        <FormItem Label="组件名称" Required>
            <Input @bind-Value="@context.Name" />
        </FormItem>
        <FormItem Label="发布状态" Required>
            <RadioGroup @bind-Value="@context.PublishStatus">
                <Radio Value="0">待发布</Radio>
                <Radio Value="1">已发布</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem Label="排序">
            <InputNumber @bind-Value="@context.Order" Min="0" DefaultValue="0"></InputNumber>
        </FormItem>
    </Form>
</Modal>

@code {
    IEnumerable<PagePartsSchema> selectedRows;
    int _total = 0;

    private bool _visible = false;
    private Form<PagePartsSchema> _form;
    private IList<PagePartsSchema> _pagePartsList;
    private PagePartsSchema _partsSchema = new PagePartsSchema();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _total = 50;
        _pagePartsList = await PagePartsState.GetOrAddAsync(this, async () =>
        {
            return await LoadPagePartsAsync(1, 50);
        });
    }

    private async Task<IList<PagePartsSchema>> LoadPagePartsAsync(int pageIndex, int pageSize)
    {
        IList<PagePartsSchema> result = [];
        return result;
    }

    private async Task<PagePartsSchema> GetPageAsync(string partsId)
    {
        PagePartsSchema PagePartsSchema = new();
        return PagePartsSchema;
    }

    private void CreateAsync()
    {
        _partsSchema = new PagePartsSchema();
        _partsSchema.Id = ShortIdGenerator.Generate();
        _visible = true;

        StateHasChanged();
    }

    private async Task EditAsync(string id)
    {
        _partsSchema = await GetPageAsync(id);
        _visible = true;

        StateHasChanged();
    }

    private async Task DeleteAsync(string partsId)
    {
        await Message.Success("删除成功！");
    }

    private async Task OnConfirmAsync(MouseEventArgs e)
    {
        var validate = _form.Validate();
        if (validate)
        {
            var isSuccess = await SavePagePartsSchemaAsync();
            if (isSuccess)
            {
                _visible = false;
                _form.Submit();
                await Message.Success("保存成功！");
                _form.Reset();
            }
            else
            {
                _visible = true;
                await Message.Error("保存失败");
            }
        }
        else
        {
            _visible = true;
        }
    }

    private async Task OnFinishAsync()
    {
        _pagePartsList = await LoadPagePartsAsync(1, 50);
    }

    private async Task<bool> SavePagePartsSchemaAsync()
    {
        //string jsonSchema = _partsSchema.ToJson();

        return true;
    }
}