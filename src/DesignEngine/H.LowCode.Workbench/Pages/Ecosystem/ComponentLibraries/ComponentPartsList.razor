@namespace H.LowCode.Workbench
@inherits LowCodeComponentBase
@layout WorkbenchLayout

@inject IComponentPartsAppService ComponentPartsAppService
@inject IMessageService Message
@inject ComponentState<ComponentPartsList, IList<ComponentPartsListModel>> ComponentPartsListState

<div style="margin: 0 0 8px 0;">
    <div style="width:60px; float: left;">
        <a href="@("/workbench/ecosystem/componentlibraries")"><Icon Type="rollback" />返回</a>
    </div>
    <div style="width:250px; float: left;">
        <Search Placeholder="组件名称" OnSearch="()=>{}" />
    </div>
    <div style="width:80px; float: right; line-height:32px; margin: 0 8px 0 0;">
        <Button Type="@ButtonType.Primary" OnClick="@(()=> CreateAsync())">新建组件</Button>
    </div>
    <div style="clear:both;"></div>
</div>

<Table TItem="ComponentPartsListModel" DataSource="@_componentPartsList" PageSize="15" PageIndex="1" Total="_total"
       @bind-SelectedRows="selectedRows" Style="height:100%;" RowKey="c=>c.ComponentId">
    @* <PropertyColumn Title="ComponentId" Property="c=>c.ComponentId" Width="300" /> *@
    <PropertyColumn Title="Name" Property="c=>c.ComponentName" Sortable />
    <PropertyColumn Title="组件名称" Property="c=>c.Label" />
    <PropertyColumn Title="组件类型" Property="c=>c.ComponentType">
        <Tag Color="@(context.ComponentType == 1 ? "Green" : "Gold")">
            @(context.ComponentType == 1 ? "原子组件" : "组合组件")
        </Tag>
    </PropertyColumn>
    <PropertyColumn Title="发布状态" Property="c=>c.PublishStatus">
        <Tag Color="@(context.PublishStatus == 1 ? "Green" : "Gold")">
            @(context.PublishStatus == 1 ? "已发布" : "待发布")
        </Tag>
    </PropertyColumn>
    <PropertyColumn Title="排序" Property="c=>c.Order" />
    <PropertyColumn Title="修改时间" Property="c=>c.ModifiedTime" Format="yyyy-MM-dd HH:mm:ss" />
    <ActionColumn Title="操作" Width="180">
        <Space Size=@("middle")>
            <SpaceItem>
                @if (context.ComponentType == 1)
                {
                    <a onclick="@(()=> EditAsync(@context.ComponentId))" style="color: #b7eb8f">设计</a>
                }
                else if(context.ComponentType == 2)
                {
                    <a href="@($"/designer/componentparts/{context.ComponentId}")" target="_blank" style="padding: 7px;border: solid #b7eb8f 1px;border-radius: 2px;line-height: 11px;height: 26px;display: block;background-color: #f6ffed;color: #389e0d;">设计</a>
                }
                else
                {
                    throw new NotSupportedException($"不支持的组件类型: {context.ComponentType}");
                }
            </SpaceItem>
            <SpaceItem>
                <a onclick="@(()=> EditAsync(@context.ComponentId))">编辑</a>
            </SpaceItem>
            <SpaceItem>
                <a onclick="@(()=> DeleteAsync(@context.ComponentId))" style="color:#ff4d4f">删除</a>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="新建组件" @bind-Visible="@_formVisible" OnOk="OnConfirmAsync">
    <Form Model="@_componentPartsSchema" OnFinish="OnFinishAsync" @ref="@_form"
          ValidateOnChange="true" LabelColSpan="8" WrapperColSpan="16">
        <FormItem Label="Library" Required>
            <Input @bind-Value="@context.LibraryId" />
        </FormItem>
        <FormItem Label="Name" Required>
            <Input @bind-Value="@context.ComponentName" />
        </FormItem>
        <FormItem Label="组件名称" Required>
            <Input @bind-Value="@context.Label" />
        </FormItem>
        <FormItem Label="组件类型" Required>
            <RadioGroup @bind-Value="@context.ComponentType">
                <Radio Value="1">原子组件</Radio>
                <Radio Value="2">组合组件</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem Label="是否容器">
            <Checkbox @bind-Checked="@context.IsContainer"></Checkbox>
        </FormItem>
        <FormItem Label="发布状态" Required>
            <RadioGroup @bind-Value="@context.PublishStatus">
                <Radio Value="0">待发布</Radio>
                <Radio Value="1">已发布</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem Label="排序">
            <InputNumber @bind-Value="@context.Order" Min="0" DefaultValue="0"></InputNumber>
        </FormItem>
    </Form>

    @* Parameter 列表 *@
    @* <div style="display: flex; justify-content: space-between; margin: 0 0 8px 0;">
        <div style="width:250px;">
            <Search Placeholder="Name" OnSearch="()=>{}" />
        </div>
        <div style="width:80px; line-height:32px; margin: 0 22px 0 0;">
            <Button Type="@ButtonType.Primary">新增 Parameter</Button>
        </div>
    </div>
    <Table TItem="ComponentParameterFragmentSchema" DataSource="@_componentPartsSchema.Fragment.Parameters">
        <ChildContent Context="context">
            <PropertyColumn Title="Name" Property="c => c.Name">
                @if (!_parameterEditCache[context.Name].edit)
                {
                    @context.Name
                }
                else
                {
                    <Input @bind-Value="_parameterEditCache[context.Name].parameter.Name" />
                }
            </PropertyColumn>
            <PropertyColumn Title="ValueType" Property="c => c.ValueType">
                @if (!_parameterEditCache[context.Name].edit)
                {
                    @context.ValueType
                }
                else
                {
                    <Input @bind-Value="_parameterEditCache[context.Name].parameter.ValueType" />
                }
            </PropertyColumn>
            <PropertyColumn Title="字符串值" Property="c => c.StringValue">
                @if (!_parameterEditCache[context.Name].edit)
                {
                    @context.StringValue
                }
                else
                {
                    <Input @bind-Value="_parameterEditCache[context.Name].parameter.StringValue" />
                }
            </PropertyColumn>
            <ActionColumn Title="操作">
                @if (!_parameterEditCache[@context.Name].edit)
                {
                    <a onclick="@(() => ParameterStartEdit(@context.Name))">编辑</a>
                    <a onclick="@(() => DeleteParameterAsync(@context.Name))" style="color:#ff4d4f">删除</a>
                }
                else
                {
                    <a onclick="@(() => SaveParameterAsync(context.Name))" class="save">保存</a>
                    <Popconfirm Title="确定取消吗?" OkText="确定" CancelText="取消"
                                OnConfirm="() => ParameterCancelEditAsync(context.Name)">
                        <a>取消</a>
                    </Popconfirm>
                }
            </ActionColumn>
        </ChildContent>
    </Table> *@
</Modal>

@code {
    [Parameter]
    public string LibraryId { get; set; }

    IEnumerable<ComponentPartsListModel> selectedRows;
    int _total = 0;

    private bool _formVisible = false;
    private Form<ComponentPartsSchema> _form;
    private IList<ComponentPartsListModel> _componentPartsList;
    private ComponentPartsSchema _componentPartsSchema = new ComponentPartsSchema();

    IDictionary<string, (bool edit, ComponentParameterFragmentSchema parameter)> _parameterEditCache = new Dictionary<string, (bool edit, ComponentParameterFragmentSchema parameter)>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _total = 50;
        _componentPartsList = await ComponentPartsListState.GetOrAddAsync(this, async () =>
        {
            return await LoadComponentPartsAsync(1, 50);
        });
    }

    private async Task<IList<ComponentPartsListModel>> LoadComponentPartsAsync(int pageIndex, int pageSize)
    {
        return await ComponentPartsAppService.GetListAsync(LibraryId);
    }

    private async Task<ComponentPartsSchema> GetComponentPartsAsync(string componentPartsId)
    {
        return await ComponentPartsAppService.GetByIdAsync(LibraryId, componentPartsId);
    }

    private void CreateAsync()
    {
        _componentPartsSchema = new ComponentPartsSchema();
        _formVisible = true;

        StateHasChanged();
    }

    private async Task DesignAsync(string componentId)
    {
        _componentPartsSchema = await GetComponentPartsAsync(componentId);
        _formVisible = true;

        StateHasChanged();
    }

    private async Task EditAsync(string componentId)
    {
        _componentPartsSchema = await GetComponentPartsAsync(componentId);
        _formVisible = true;

        StateHasChanged();
    }

    private async Task DeleteAsync(string componentPartsId)
    {
        await ComponentPartsAppService.DeleteAsync(LibraryId, componentPartsId);

        await Message.Success("删除成功！");
    }

    private async Task OnConfirmAsync(MouseEventArgs e)
    {
        var validate = _form.Validate();
        if (validate)
        {
            var isSuccess = await SaveComponentPartsSchemaAsync();
            if (isSuccess)
            {
                _formVisible = false;
                _form.Submit();
                await Message.Success("保存成功！");
                _form.Reset();
            }
            else
            {
                _formVisible = true;
                await Message.Error("保存失败");
            }
        }
        else
        {
            _formVisible = true;
        }
    }

    private async Task OnFinishAsync()
    {
        _componentPartsList = await LoadComponentPartsAsync(1, 50);
    }

    private async Task<bool> SaveComponentPartsSchemaAsync()
    {
        return await ComponentPartsAppService.SaveAsync(_componentPartsSchema);
    }

    #region Parameter

    private async Task CreateParameterAsync()
    {
        await Task.Delay(1);

        ComponentParameterFragmentSchema newParameter = new();

        //添加编辑缓存
        _parameterEditCache[newParameter.Name] = (true, newParameter);

        _componentPartsSchema.Fragment.Parameters.Add(newParameter);

        //StateHasChanged();
    }

    private async Task SaveParameterAsync(string name)
    {
        await Task.Delay(1);
        var index =  _componentPartsSchema.Fragment.Parameters.FindIndex(item => item.Name == name);
        _componentPartsSchema.Fragment.Parameters[index] = _parameterEditCache[name].parameter; // apply the copy to data source
        _parameterEditCache[name] = (false, _componentPartsSchema.Fragment.Parameters[index]); // don't affect rows in editing

        StateHasChanged();
    }

    private async Task DeleteParameterAsync(string name)
    {
        await Task.Delay(1);

    }

    private async Task ParameterStartEdit(string name)
    {
        await Task.Delay(1);
        var data = _parameterEditCache[name];
        _parameterEditCache[name] = (true, data.parameter with { }); // add a copy in cache

        StateHasChanged();
    }

    private async Task ParameterCancelEditAsync(string name)
    {
        await Task.Delay(1);
        var data = _componentPartsSchema.Fragment.Parameters.FirstOrDefault(item => item.Name == name);
        _parameterEditCache[name] = (false, data); // recovery

        StateHasChanged();
    }
    #endregion
}