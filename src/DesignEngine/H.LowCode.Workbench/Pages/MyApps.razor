@page "/workbench/myapps"
@namespace H.LowCode.Workbench
@inherits LowCodePageComponentBase
@layout WorkbenchLayout

@inject IAppApplicationService AppApplicationService
@inject ComponentState<MyApps, IList<AppListModel>> MyAppsState

<PageTitle>我的应用 - H.LowCode</PageTitle>

<div style="margin:-24px -24px 0px -24px; padding: 0 50px; background-size: 100% 80px;
        background-image:url(_content/H.LowCode.Workbench/images/img_001.png)">
    <div style="width:80%; line-height:80px; margin:auto;">
        <div style="display: flex; justify-content: space-between; margin: 0 0 8px 5px;">
            <div style="width:500px;">
                <span style="font-size: large; margin-right:20px;">XXX 你好!</span>
                <span style="color:#c0baba;">你可以从这里开始创建应用～</span>
            </div>
            <div style="width:80px; margin-right:10px;">
                <Button Type="@ButtonType.Primary" OnClick="CreateApp">创建应用</Button>
            </div>
        </div>
    </div>
</div>
<div style="width:80%; overflow: hidden; margin:auto; padding: 10px;">
    <div style="display: flex; justify-content: space-between; margin: 0 0 8px 5px;">
        <div style="text-align: left; width:500px;">
            <div style="width: 200px;">
                <Search Placeholder="应用名称" OnSearch="()=>{}" />
            </div>
        </div>
        <div style="line-height:32px; margin-right:10px;">
            <Select TItemValue="string" TItem="string" DefaultValue="@("all")" Style="width:100px">
                <SelectOptions>
                    <SelectOption Value="@("all")" Label="全部" />
                    <SelectOption Value="@("published")" Label="已发布" />
                    <SelectOption Value="@("unpublished")" Label="未发布" />
                </SelectOptions>
            </Select>
        </div>
    </div>

    @if (_appList != null)
    {
        @foreach (var app in _appList)
        {
            <Card Class="myapps" Style="float:left; width:300px; margin:5px;" Bordered>
                <ChildContent>
                    <CardMeta AvatarTemplate="@avatarTemplate" Title="@app.Name" Description="@app.Description" Style="height: 60px;" />
                </ChildContent>
                <ActionTemplate>
                    <CardAction>
                        <a href="@($"/myapp/{app.Id}/pagemanager")" title="开发应用" target="_blank"><Icon Type="desktop" /></a>
                    </CardAction>
                    <CardAction>
                        <a href="@($"{app.SiteUrl}/{app.Id}/index")" title="访问应用" target="_blank"><Icon Type="global" /></a>
                    </CardAction>
                    <CardAction>
                        <a onclick="@(() =>EditApp(app.Id))" title="编辑"><Icon Type="edit" /></a>
                    </CardAction>
                    <CardAction>
                        <a href="@($"/myapp/{app.Id}/appsettings")" title="应用设置" target="_blank"><Icon Type="setting" /></a>
                    </CardAction>
                </ActionTemplate>
            </Card>
        }
    }
</div>

<Modal Title="创建应用" @bind-Visible="@_createVisible" Width="1100" Footer="null">
    <AppCreateFromTemplate OnSubmit="ReloadApps"></AppCreateFromTemplate>
</Modal>

<Modal Title="编辑应用" @bind-Visible="@_editVisible" OnOk="OnConfirm">
    <AppForm AppSchema="_currentApp" OnSubmit="ReloadApps" @ref="@_appForm"></AppForm>
</Modal>

@code {
    private IList<AppListModel> _appList;
    private AppSchema _currentApp;

    private bool _createVisible = false;
    private bool _editVisible = false;
    private AppForm _appForm;

    RenderFragment avatarTemplate = @<Avatar Icon="appstore"></Avatar>;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _appList = await MyAppsState.GetOrAddAsync(this, async () =>
        {
            return await LoadAppsAsync();
        });
    }

    private async Task<IList<AppListModel>> LoadAppsAsync()
    {
        return await AppApplicationService.GetAppsAsync();
    }

    private async Task OnConfirm(MouseEventArgs e)
    {
        await _appForm.SubmitAsync();
    }

    private async void ReloadApps()
    {
        _createVisible = false;
        _editVisible = false;
        await LoadAppsAsync();

        StateHasChanged();
    }

    private void CreateApp()
    {
        _currentApp = new();
        _createVisible = true;
        StateHasChanged();
    }

    private async Task EditApp(string id)
    {
        _currentApp = await AppApplicationService.GetByIdAsync(id);
        _editVisible = true;
        StateHasChanged();
    }
}