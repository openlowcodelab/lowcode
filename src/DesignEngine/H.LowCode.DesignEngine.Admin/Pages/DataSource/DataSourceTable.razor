@* 数据表基本信息 *@
<Descriptions Style="margin: 0 0 8px 0;" Bordered>
    <DescriptionsItem Title="表名">
        <Input @bind-Value="@DataSource.Key" Disabled="@(!DataSource.Key.IsNullOrEmpty())">
    </DescriptionsItem>
    <DescriptionsItem Title="表中文名" Span="2">
        <Input @bind-Value="@DataSource.Name"></Input>
    </DescriptionsItem>
    <DescriptionsItem Title="描述" Span="3">
        <TextArea @bind-Value="@DataSource.Description" Rows="2"></TextArea>
    </DescriptionsItem>
</Descriptions>

@* 字段列表 *@
<div style="display: flex; justify-content: space-between; margin: 0 0 8px 0;">
    <div style="text-align: left; width:250px;">
        <Search Placeholder="表名、表中文名" OnSearch="()=>{}" />
    </div>
    <div style="text-align: right; width:80px; line-height:32px; margin: 0 22px 0 0;">
        <Button Type="@ButtonType.Primary" OnClick="CreateAsync">新增字段</Button>
    </div>
</div>
<Table TItem="DataSourceTableFieldSchema" DataSource="@DataSource.DataSourceTableFields">
    <Column Title="字段名" @bind-Field="@context.FieldKey" Sortable />
    <Column Title="字段中文名" @bind-Field="@context.FieldName" Sortable />
    <Column Title="字段类型" @bind-Field="@context.FieldType" />
    <Column Title="是否主键" @bind-Field="@context.IsPrimaryKey" />
    <Column Title="是否唯一" @bind-Field="@context.IsUnique" />
    <Column Title="是否不可空" @bind-Field="@context.IsRequired" />
    <ActionColumn Title="操作">
        <Space Size=@("middle")>
            <SpaceItem>
                <a onclick="@(()=>EditAsync(@context))">编辑</a>
            </SpaceItem>
            <SpaceItem>
                <a onclick="@(()=>DeleteAsync(@context.FieldKey))" style="color:#ff4d4f">删除</a>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

@code {
    [Parameter]
    public DataSourceSchema DataSource { get; set; }


    private async Task CreateAsync()
    {
        await Task.Delay(1);

    }

    private async Task EditAsync(DataSourceTableFieldSchema dataSource)
    {
        await Task.Delay(1);

        StateHasChanged();

    }

    private async Task DeleteAsync(string id)
    {
        await Task.Delay(1);

    }
}
