@page "/myapp/menumanager/{AppId}"

@layout DesignEngineAdminLayout
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IMessageService Message

<div style="display: flex; justify-content: space-between; margin: 0 0 8px 0;">
    <div style="text-align: left; width:250px;">
        <Search Placeholder="菜单名称" OnSearch="()=>{}" />
    </div>
    <div style="text-align: right; width:80px; line-height:32px;">
        <Button Type="@ButtonType.Primary" OnClick="@(()=>{ _visible = true; })">新建菜单</Button>
    </div>
</div>

<Table @ref="@_table" TItem="MenuSchema" DataSource="@_menuList" Total="_total" OnChange="OnChangeAsync"
       @bind-PageIndex="_pageIndex" @bind-PageSize="_pageSize" @bind-SelectedRows="selectedRows">
    <Selection Key="@(context.Id)" />
    <Column @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.Title" Format="yyyy-MM-dd" Sortable />
    <Column @bind-Field="@context.Icon" />
    <Column @bind-Field="@context.MenuUrl" />
    <ActionColumn Title="Acton">
         <Space Size=@("middle")>
             <SpaceItem>
                 <a onclick="()=>Edit(@context.Id)">Edit</a>
             </SpaceItem>
            <SpaceItem>
                <a onclick="()=>Delete(@context.Id)" style="color:#ff4d4f">Delete</a>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="新建菜单" @bind-Visible="@_visible" OnOk="OnConfirmAsync" OnCancel="OnCancel">
    <Form Model="@_menuSchema" LabelColSpan="8" WrapperColSpan="16" OnFinish="OnFinish" @ref="@_form"
          ValidateMode="@FormValidateMode.Complex" ValidateOnChange="true">
        @* <FormItem Label="菜单标识" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <Input @bind-Value="@context.Id" />
        </FormItem> *@
        <FormItem Label="菜单名称" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <Input @bind-Value="@context.Title" />
        </FormItem>
        <FormItem Label="菜单图标" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <Input @bind-Value="@context.Icon" />
        </FormItem>
        <FormItem Label="菜单地址" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <Input @bind-Value="@context.MenuUrl" />
        </FormItem>
    </Form>
</Modal>

@code {
    [Parameter]
    public string AppId { get; set; }

    private ITable _table;
    private List<MenuSchema> _menuList;
    IEnumerable<MenuSchema> selectedRows;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    private bool _visible = false;
    private Form<MenuSchema> _form;
    private MenuSchema _menuSchema = new MenuSchema();

    protected override async Task OnInitializedAsync()
    {
        _menuList = await GetPageListAsync(1, 5);
        _total = 5;
    }

    public async Task OnChangeAsync(QueryModel<MenuSchema> queryModel)
    {
        await Task.Delay(100);
    }

    public async Task<List<MenuSchema>> GetPageListAsync(int pageIndex, int num)
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        var result = await httpClient.GetFromJsonAsync<List<MenuSchema>>($"api/designengine/getmenus?appId={AppId}");
        return result;
    }

    private async Task<MenuSchema> GetMenuAsync(string id)
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        var result = await httpClient.GetFromJsonAsync<MenuSchema>($"api/designengine/getmenu?appId={AppId}&menuId={id}");
        return result;
    }

    private async Task EditAsync(string id)
    {
        _menuSchema = await GetMenuAsync(id);
        _visible = true;
    }

    private async Task DeleteAsync(string id)
    {
        await Task.Delay(1);
    }

    private async Task OnConfirmAsync(MouseEventArgs e)
    {
        var validate = _form.Validate();
        if (validate)
        {
            var result = await SaveMenuSchemaAsync();
            if (result.StatusCode == HttpStatusCode.OK)
            {
                _visible = false;
                _form.Submit();
                await Message.Success("新建成功！");
                _form.Reset();
            }
            else
            {
                _visible = true;
                await Message.Error($"新建失败: {result.ReasonPhrase}");
            }
        }
        else
        {
            _visible = true;
        }
    }

    private void OnCancel(MouseEventArgs e)
    {

    }

    private void OnFinish()
    {
        _table.ReloadData();
    }


    private async Task<HttpResponseMessage> SaveMenuSchemaAsync()
    {
        if (_menuSchema.Id.IsNullOrEmpty())
            _menuSchema.Id = Guid.NewGuid().ToString();
        _menuSchema.AppId = AppId;

        string jsonSchema = _menuSchema.ToJson();

        var content = new StringContent(jsonSchema, Encoding.UTF8, "application/json");

        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);
        var result = await httpClient.PostAsync($"api/designengine/savemenu", content);

        return result;
    }
}