@page "/myapp/{AppId}/menumanager"
@namespace H.LowCode.DesignEngine.Admin
@layout DesignEngineAdminLayout

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IMessageService Message
@inject ComponentStateWrapper<MenuManager, IList<MenuSchema>> State

<div style="display: flex; justify-content: space-between; margin: 0 0 8px 0;">
    <div style="text-align: left; width:250px;">
        <Search Placeholder="菜单名称" OnSearch="()=>{}" />
    </div>
    <div style="text-align: right; width:80px; line-height:32px; margin: 0 8px 0 0;">
        <Button Type="@ButtonType.Primary" OnClick="@(()=> CreateAsync(string.Empty))">新建菜单</Button>
    </div>
</div>

<Table @ref="@_table" TItem="MenuSchema" TreeChildren="item=>item.Childrens" DataSource="@State.Value"
       Total="_total" OnChange="OnChangeAsync" DefaultExpandAllRows
       @bind-PageIndex="_pageIndex" @bind-PageSize="_pageSize" @bind-SelectedRows="selectedRows">
    <Selection Key="@(context.Id)" />
    @* <Column Title="菜单Id" @bind-Field="@context.Id" Sortable /> *@
    <Column Title="菜单名称" @bind-Field="@context.Title" Format="yyyy-MM-dd" Sortable />
    <Column Title="排序" @bind-Field="@context.Order" />
    <Column Title="图标" @bind-Field="@context.Icon" />
    <Column Title="类型" @bind-Field="@context.MenuType" Format="@(context.MenuType == 0 ?"菜单":"目录")" />
    <Column Title="页面地址" @bind-Field="@context.MenuUrl" />
    <ActionColumn Title="操作">
         <Space Size=@("middle")>
            @if(context.MenuType == 1)
            {
                <SpaceItem>
                    <a onclick="@(()=> CreateAsync(@context.Id))">新增子菜单</a>
                </SpaceItem>
            }
            <SpaceItem>
                 <a onclick="@(()=> EditAsync(@context.Id))">编辑</a>
             </SpaceItem>
            <SpaceItem>
                <a onclick="@(()=> DeleteAsync(@context.Id))" style="color:#ff4d4f">删除</a>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="新建菜单" @bind-Visible="@_visible" OnOk="OnConfirmAsync" OnCancel="OnCancel">
    <Form Model="@_menuSchema" LabelColSpan="8" WrapperColSpan="16" OnFinish="OnFinish" @ref="@_form"
          ValidateMode="@FormValidateMode.Complex" ValidateOnChange="true">
        @* <FormItem Label="菜单标识" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <Input @bind-Value="@context.Id" />
        </FormItem> *@
        @if (context.ParentId.IsNullOrEmpty() == false)
        {
            <FormItem Label="父级Id" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
                <Input @bind-Value="@context.ParentId" Disabled />
            </FormItem>
        }
        <FormItem Label="菜单名称" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <Input @bind-Value="@context.Title" />
        </FormItem>
        <FormItem Label="类型" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <RadioGroup @bind-Value="@context.MenuType">
                <Radio Value="0">菜单</Radio>
                <Radio Value="1">目录</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem Label="图标" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <Input @bind-Value="@context.Icon" />
        </FormItem>
        @if (context.MenuType == 0)
        {
            <FormItem Label="页面地址" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
                <Input @bind-Value="@context.MenuUrl" />
            </FormItem>
        }
        <FormItem Label="排序">
            <InputNumber @bind-Value="@context.Order" Min="0" DefaultValue="0"></InputNumber>
        </FormItem>
    </Form>
</Modal>

@code {
    [Parameter]
    public string AppId { get; set; }

    private ITable _table;
    IEnumerable<MenuSchema> selectedRows;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    private bool _visible = false;
    private Form<MenuSchema> _form;
    private MenuSchema _menuSchema = new MenuSchema();

    protected override async Task OnInitializedAsync()
    {
        if (State.Value is null)
        {
            State.Value = await GetMenuListAsync();

            _total = 5;

            await base.OnInitializedAsync();
        }
    }

    public async Task OnChangeAsync(QueryModel<MenuSchema> queryModel)
    {
        await Task.Delay(100);
    }

    public async Task<IList<MenuSchema>> GetMenuListAsync()
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        var result = await httpClient.GetFromJsonAsync<List<MenuSchema>>($"api/designengine/getmenus?appId={AppId}");
        return result;
    }

    private async Task<MenuSchema> GetMenuAsync(string id)
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        var result = await httpClient.GetFromJsonAsync<MenuSchema>($"api/designengine/getmenu?appId={AppId}&menuId={id}");
        return result;
    }

    private void CreateAsync(string parentId)
    {
        _menuSchema = new MenuSchema();
        _menuSchema.ParentId = parentId;
        _visible = true;

        StateHasChanged();
    }

    private async Task EditAsync(string id)
    {
        _menuSchema = await GetMenuAsync(id);
        _visible = true;

        StateHasChanged();
    }

    private async Task DeleteAsync(string id)
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        await httpClient.GetAsync($"api/designengine/deletemenu?appId={AppId}&menuId={id}");
        await Message.Success("删除成功！");
    }

    private async Task OnConfirmAsync(MouseEventArgs e)
    {
        var validate = _form.Validate();
        if (validate)
        {
            var result = await SaveMenuSchemaAsync();
            if (result.StatusCode == HttpStatusCode.OK)
            {
                _visible = false;
                _form.Submit();
                await Message.Success("保存成功！");
                _form.Reset();
            }
            else
            {
                _visible = true;
                await Message.Error($"保存失败: {result.ReasonPhrase}");
            }
        }
        else
        {
            _visible = true;
        }
    }

    private void OnCancel(MouseEventArgs e)
    {

    }

    private void OnFinish()
    {
        _table.ReloadData();
    }


    private async Task<HttpResponseMessage> SaveMenuSchemaAsync()
    {
        if (_menuSchema.Id.IsNullOrEmpty())
            _menuSchema.Id = Guid.NewGuid().ToString();
        _menuSchema.AppId = AppId;

        string jsonSchema = _menuSchema.ToJson();

        var content = new StringContent(jsonSchema, Encoding.UTF8, "application/json");

        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);
        var result = await httpClient.PostAsync($"api/designengine/savemenu", content);

        return result;
    }
}