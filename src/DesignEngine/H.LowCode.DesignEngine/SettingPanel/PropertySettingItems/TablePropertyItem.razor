@namespace H.LowCode.DesignEngine
@inherits LowCodeComponentBase

<div style="display: flex; justify-content: space-between;">
    <div>
        表格列
    </div>
    <div style="text-align: center; width:22px;">
        <a onclick="@(() => CreateColumn())" style="border: solid #c4c4c4 1px; line-height: 18px;height: 22px;display: block;background-color: #fafafa; color:#2c2c2c">+</a>
    </div>
</div>
<hr color="#f6f6f6" />
@foreach (var column in _tableSchema.Columns)
{
    <div>
        <span draggable="true" style="cursor: move; display: inline-block; width: 10px; margin: 0 auto; writing-mode: vertical-lr;">...</span>
        <span style="display:inline-block; width:140px;">@column.Title</span>
        <Icon Type="edit" OnClick="@(() => EditColumn(column.Id))" Theme="IconThemeType.Outline" Style="cursor: pointer;" />
        <Icon Type="delete" OnClick="@(() => DeleteColumn(column.Id))" Theme="IconThemeType.Outline" Style="cursor: pointer;" />
    </div>
}
<hr color="#f6f6f6" />

<div style="display: flex; justify-content: space-between; margin-top: 20px;">
    <div>
        表格按钮
    </div>
    <div style="text-align: center; width:22px;">
        <a onclick="@(() => CreateButton())" style="border: solid #c4c4c4 1px; line-height: 18px;height: 22px;display: block;background-color: #fafafa; color:#2c2c2c">+</a>
    </div>
</div>
<hr color="#f6f6f6" />
@foreach (var btn in _tableSchema.Buttons)
{
    <div>
        <span draggable="true" style="cursor: move; display: inline-block; width: 10px; margin: 0 auto; writing-mode: vertical-lr;">...</span>
        <span style="display:inline-block; width:140px;">@btn.Title</span>
        <Icon Type="edit" OnClick="@(() => EditButton(btn.Id))" Theme="IconThemeType.Outline" Style="cursor: pointer;" />
        <Icon Type="delete" OnClick="@(() => DeleteButton(btn.Id))" Theme="IconThemeType.Outline" Style="cursor: pointer;" />
    </div>
}
<hr color="#f6f6f6" />

<Modal Title="表格列" @bind-Visible="@_columnVisible" OnOk="OnColumnConfirm">
    <Form Model="@_tableColumnSchema" OnFinish="OnColumnFinish" @ref="_columnForm"
          ValidateOnChange="true" LabelColSpan="8" WrapperColSpan="16">
        <FormItem Label="字段标识" Required>
            <Input @bind-Value="@context.Name" />
        </FormItem>
        <FormItem Label="字段名称" Required>
            <Input @bind-Value="@context.Title" />
        </FormItem>
        <FormItem Label="是否主键">
            <RadioGroup TValue="bool" DefaultValue="false" @bind-Value="@context.IsPrimaryKey">
                <Radio Value="false">否</Radio>
                <Radio Value="true">是</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem Label="是否支持过滤">
            <RadioGroup TValue="bool" DefaultValue="false" @bind-Value="@context.Filterable">
                <Radio Value="false">否</Radio>
                <Radio Value="true">是</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem Label="是否支持排序">
            <RadioGroup TValue="bool" DefaultValue="false" @bind-Value="@context.Sortable">
                <Radio Value="false">否</Radio>
                <Radio Value="true">是</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem Label="排序">
            <AntDesign.InputNumber @bind-Value="@context.Order" Min="0" DefaultValue="0"></AntDesign.InputNumber>
        </FormItem>
    </Form>
</Modal>

<Modal Title="表格按钮" @bind-Visible="@_btnVisible" OnOk="OnButtonConfirm">
    <Form Model="@_tableButtonSchema" OnFinish="OnButtonFinish" @ref="_btnForm"
          ValidateOnChange="true" LabelColSpan="8" WrapperColSpan="16">
        <FormItem Label="按钮标识" Required>
            <Input @bind-Value="@context.Name" />
        </FormItem>
        <FormItem Label="按钮名称" Required>
            <Input @bind-Value="@context.Title" />
        </FormItem>
        <FormItem Label="按钮行为">
            <EnumRadioGroup TEnum="ActionTypeEnum" @bind-Value="@context.ActionType" Name="radio_actiontype"></EnumRadioGroup>
        </FormItem>
        <FormItem Label="目标对象" Required>
            <Input @bind-Value="@context.TargetId" />
        </FormItem>
        <FormItem Label="排序">
            <AntDesign.InputNumber @bind-Value="@context.Order" Min="0" DefaultValue="0"></AntDesign.InputNumber>
        </FormItem>
    </Form>
</Modal>

@code {
    [Parameter]
    public ComponentPartsSchema Component { get; set; }

    [Parameter]
    public Action<string> OnTablePropertyChange { get; set; }

    private TablePropertySchema _tableSchema = new();

    protected override void OnInitialized()
    {
        // if (Component.Property?.TablePropertiess.IsNullOrEmpty() == false)
        // {
        //     _tableSchema = JsonSerializer.Deserialize<TablePropertySchema>(Component.Property.TablePropertiess);
        // }

        base.OnInitialized();
    }

    private void OnPropertyChanged()
    {
        //Component.Property.TablePropertiess = _tableSchema.ToJson();

        //OnTablePropertyChange?.Invoke(Component.Property.TablePropertiess);
    }

    #region Columns
    private bool _columnVisible;
    private Form<TableColumnSchema> _columnForm;
    private bool _isColumnCreate;
    private TableColumnSchema _tableColumnSchema = new TableColumnSchema();

    private void CreateColumn()
    {
        _isColumnCreate = true;
        _columnVisible = true;
        _tableColumnSchema = new();
        _tableColumnSchema.Id = ShortIdGenerator.Generate();

        StateHasChanged();
    }

    private void EditColumn(string id)
    {
        _isColumnCreate = false;
        _columnVisible = true;
        _tableColumnSchema = _tableSchema.Columns.First(t => t.Id == id);

        StateHasChanged();
    }

    private void DeleteColumn(string id)
    {
        var column = _tableSchema.Columns.First(t => t.Id == id);
        _tableSchema.Columns.Remove(column);

        OnPropertyChanged();
    }

    private void OnColumnConfirm(MouseEventArgs e)
    {
        var validate = _columnForm.Validate();
        if (validate)
        {
            var result = SaveTableColumnSchema();
            if (result)
            {
                _columnVisible = false;
                _columnForm.Submit();
                _columnForm.Reset();
            }
            else
            {
                _columnVisible = true;
            }
        }
        else
        {
            _columnVisible = true;
        }
    }

    private void OnColumnFinish()
    {
        OnPropertyChanged();
    }

    private bool SaveTableColumnSchema()
    {
        if (_isColumnCreate)
        {
            TableColumnSchema column = _tableColumnSchema.DeepClone();
            _tableSchema.Columns.Add(column);
        }
        else
        {
            //无需赋值
            // var column = _columns.First(t => t.Id == _tableColumnSchema.Id);
            // column.Name = _tableColumnSchema.Name;
            // column.Title = _tableColumnSchema.Title;
            // column.IsPrimaryKey = _tableColumnSchema.IsPrimaryKey;
            // column.Filterable = _tableColumnSchema.Filterable;
            // column.Sortable = _tableColumnSchema.Sortable;
            // column.Order = _tableColumnSchema.Order;
        }
        return true;
    }
    #endregion

    #region Buttons
    private bool _btnVisible;
    private Form<TableButtonSchema> _btnForm;
    private bool _isbtnCreate;
    private TableButtonSchema _tableButtonSchema = new TableButtonSchema();

    private void CreateButton()
    {
        _isbtnCreate = true;
        _btnVisible = true;
        _tableButtonSchema = new();
        _tableButtonSchema.Id = ShortIdGenerator.Generate();

        StateHasChanged();
    }

    private void EditButton(string id)
    {
        _isbtnCreate = false;
        _btnVisible = true;
        _tableButtonSchema = _tableSchema.Buttons.First(t => t.Id == id);

        StateHasChanged();
    }

    private void DeleteButton(string id)
    {
        var btn = _tableSchema.Buttons.First(t => t.Id == id);
        _tableSchema.Buttons.Remove(btn);

        OnPropertyChanged();
    }

    private void OnButtonConfirm(MouseEventArgs e)
    {
        var validate = _btnForm.Validate();
        if (validate)
        {
            var result = SaveTableButtonSchema();
            if (result)
            {
                _btnVisible = false;
                _btnForm.Submit();
                _btnForm.Reset();
            }
            else
            {
                _btnVisible = true;
            }
        }
        else
        {
            _btnVisible = true;
        }
    }

    private void OnButtonFinish()
    {
        OnPropertyChanged();
    }

    private bool SaveTableButtonSchema()
    {
        if (_isbtnCreate)
        {
            TableButtonSchema btn = _tableButtonSchema.DeepClone();
            _tableSchema.Buttons.Add(btn);
        }
        else
        {
            //无需赋值
        }
        return true;
    }
    #endregion
}
