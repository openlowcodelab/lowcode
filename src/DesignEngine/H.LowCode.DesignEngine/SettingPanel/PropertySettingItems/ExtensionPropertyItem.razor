@namespace H.LowCode.DesignEngine
@inherits DesignEngineLowCodeComponentBase

@if(Component?.AttributeDefineGroups != null){
    foreach (var group in Component.AttributeDefineGroups)
    {
        if(!string.IsNullOrEmpty(group.GroupName)){
            <div style="border-left: 5px solid #d0d4da;padding: 0 0 0 8px; margin:30px 0 10px;">
                @group.GroupName
            </div>
        }

        foreach (var attrDefine in group.AttributeDefines)
        {
            <div class="propertysetting-item">
                <label>@attrDefine.DisplayName：</label>

                @if (attrDefine.AttributeItemType == ComponentAttributeItemTypeEnum.Input)
                {
                    <Input TValue="string" @bind-value="@attrDefine.StringValue" OnChange="OnStringPropertyChange" />
                }
                else if (attrDefine.AttributeItemType == ComponentAttributeItemTypeEnum.InputNumber)
                {
                    <AntDesign.InputNumber TValue="int" @bind-value="@attrDefine.IntValue" OnChange="OnIntPropertyChange" />
                }
                else if (attrDefine.AttributeItemType == ComponentAttributeItemTypeEnum.Radio)
                {

                }
                else if (attrDefine.AttributeItemType == ComponentAttributeItemTypeEnum.Checkbox)
                {
                    <Checkbox Checked="@attrDefine.BoolValue"></Checkbox>
                }
                else if (attrDefine.AttributeItemType == ComponentAttributeItemTypeEnum.Select)
                {

                }
                else if (attrDefine.AttributeItemType == ComponentAttributeItemTypeEnum.Switch)
                {
                    <Switch @bind-Checked="@attrDefine.BoolValue"></Switch>
                }
                else if (attrDefine.AttributeItemType == ComponentAttributeItemTypeEnum.Date)
                {

                }
                else if (attrDefine.AttributeItemType == ComponentAttributeItemTypeEnum.Textarea)
                {

                }

                @if (!string.IsNullOrEmpty(attrDefine.Description))
                {
                    <div style="color:#c7c7c7">@attrDefine.Description</div>
                }
            </div>
        }
    }
}

@code {
    [Parameter]
    public ComponentPartsSchema Component { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void OnExtensionPropertyChange(string key, string attrDefineValue)
    {
        ComponentPartsAttributeDefineSchema attrDefine = null;
        Component.AttributeDefineGroups.ForEach(t =>
        {
            t.AttributeDefines.ForEach(p =>
            {
                if (string.Equals(p.AttributeName, key))
                    attrDefine = p;
            });
        });
        if (attrDefine != null)
        {
            attrDefine.StringValue = attrDefineValue;
        }
    }

    private void OnStringPropertyChange(string value)
    {

    }

    private void OnIntPropertyChange(int value)
    {
        
    }
}
