@namespace H.LowCode.DesignEngine
@inherits LowCodeComponentBase

@foreach (var group in Component.PropertyGroups)
{
    if(!string.IsNullOrEmpty(group.DisplayName)){
        <div style="border-left: 5px solid #d0d4da;padding: 0 0 0 8px; margin:30px 0 10px;">
            @group.DisplayName
        </div>
    }

    foreach (var property in group.Properties)
    {
        <div class="propertysetting-item">
            <label>@property.DisplayName：</label>

            @if (property.PropertyItemType == PropertyItemTypeEnum.Text)
            {
                <Input TValue="string" @bind-value="@property.StringValue" OnChange="OnStringPropertyChange" />
            }
            else if (property.PropertyItemType == PropertyItemTypeEnum.Text_Int)
            {
                <Input TValue="int?" @bind-value="@property.IntValue" OnChange="OnIntPropertyChange" />
            }
            else if (property.PropertyItemType == PropertyItemTypeEnum.Radio)
            {

            }
            else if (property.PropertyItemType == PropertyItemTypeEnum.Checkbox)
            {
                //TODO
                @* <Checkbox @bind-checked="@property.BoolValue"></Checkbox> *@
            }
            else if (property.PropertyItemType == PropertyItemTypeEnum.Select)
            {

            }
            else if (property.PropertyItemType == PropertyItemTypeEnum.Switch)
            {

            }
            else if (property.PropertyItemType == PropertyItemTypeEnum.Date)
            {

            }
            else if (property.PropertyItemType == PropertyItemTypeEnum.Textarea)
            {

            }

            @if (!string.IsNullOrEmpty(property.Description))
            {
                <div style="color:#c7c7c7">@property.Description</div>
            }
        </div>
    }
}

@code {
    [Parameter]
    public ComponentPartsSchema Component { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void OnExtensionPropertyChange(string key, string propertyValue)
    {
        ComponentPropertySchema property = null;
        Component.PropertyGroups.ForEach(t =>
        {
            t.Properties.ForEach(p =>
            {
                if (string.Equals(p.Name, key))
                    property = p;
            });
        });
        if (property != null)
        {
            property.StringValue = propertyValue;
        }
    }

    private void OnStringPropertyChange(string value)
    {

    }

    private void OnIntPropertyChange(int? value)
    {
        
    }
}
