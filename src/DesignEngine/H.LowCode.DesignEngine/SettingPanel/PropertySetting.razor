@namespace H.LowCode.DesignEngine

<div style="height:100%; overflow-y:auto">
    <div style="border-left: 5px solid #d0d4da;padding: 0 0 0 8px; margin:5px 0;">基础</div>
    @if (Component != null)
    {
        @if (Component.IsContainerComponent == false)
        {
            <div class="propertysetting-item">
                <label>Name <span style="font-size:10px; color:gray;">(字段名称/英文)</span>：</label>
                <Input TValue="string" @bind-value="@Component.ComponentProperty.Name" OnChange="(value) => OnPropertyChange()" />
            </div>
            <div class="propertysetting-item">
                <label>标题：</label>
                <Input TValue="string" @bind-value="@Component.ComponentProperty.Title" OnChange="(value) => OnPropertyChange()" />
            </div>
            <div class="propertysetting-item">
                <label>描述：</label>
                <TextArea @bind-value="@Component.ComponentProperty.Description" />
            </div>
        }
        @if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.DefaultValue)))
        {
            <div class="propertysetting-item">
                <label>默认值：</label>
                <Input TValue="string" @bind-value="@Component.ComponentProperty.DefaultValue" />
            </div>
        }
        @if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.IsRequired)))
        {
            <div class="propertysetting-item">
                <label>必填：</label>
                <Checkbox @bind-Checked="@Component.ComponentProperty.IsRequired" OnChange="(value) => OnPropertyChange()" />
            </div>
        }

        @*"type": "string"*@
        @if (Component.ComponentProperty.ComponentValueType == ComponentValueType.String)
        {
            if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.MaximumLength)))
            {
                <div class="propertysetting-item">
                    <label>最大长度：</label>
                    <Input TValue="long?" @bind-value="@Component.ComponentProperty.MaximumLength" OnChange="(value) => OnPropertyChange()" />
                </div>
            }
            if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.MinimumLength)))
            {
                <div class="propertysetting-item">
                    <label>最小长度：</label>
                    <Input TValue="long?" @bind-value="@Component.ComponentProperty.MinimumLength" OnChange="(value) => OnPropertyChange()" />
                </div>
            }
            if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.Pattern)))
            {
                <div class="propertysetting-item">
                    <label>Pattern：</label>
                    <Input TValue="string" @bind-value="@Component.ComponentProperty.Pattern" OnChange="(value) => OnPropertyChange()" />
                </div>
            }
            if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.Format)))
            {
                <div class="propertysetting-item">
                    <label>Format：</label>
                    <Input TValue="string" @bind-value="@Component.ComponentProperty.Format" OnChange="(value) => OnPropertyChange()" />
                </div>
            }
        }

        @*"type": "integer"*@
        @*"type": "number"*@
        @if (Component.ComponentProperty.ComponentValueType == ComponentValueType.Integer || Component.ComponentProperty.ComponentValueType == ComponentValueType.Number)
        {
            if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.Maximum)))
            {
                <div class="propertysetting-item">
                    <label>最大值：</label>
                    <Input TValue="double?" @bind-value="@Component.ComponentProperty.Maximum" OnChange="(value) => OnPropertyChange()" />
                </div>
            }
            if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.Minimum)))
            {
                <div class="propertysetting-item">
                    <label>最小值：</label>
                    <Input TValue="double?" @bind-value="@Component.ComponentProperty.Minimum" OnChange="(value) => OnPropertyChange()" />
                </div>
            }
        }

        @*"type": "array"*@
        @*if(Component.ComponentValueType == ComponentValueType.Array)
        {
        
        }*@
    }

    <div style="border-left: 5px solid #d0d4da;padding: 0 0 0 8px; margin:5px 0;">数据源</div>
    <div class="propertysetting-item">
        <label>类型：</label>
        <SimpleSelect DefaultValue="0" @bind-Value="@_datasourceType">
            <SelectOptions>
                <SimpleSelectOption Value="0" Label="Default"></SimpleSelectOption>
                <SimpleSelectOption Value="1" Label="API"></SimpleSelectOption>
                <SimpleSelectOption Value="2" Label="SQL"></SimpleSelectOption>
                <SimpleSelectOption Value="3" Label="Expression"></SimpleSelectOption>
                <SimpleSelectOption Value="4" Label="Fiexd"></SimpleSelectOption>
            </SelectOptions>
        </SimpleSelect>
    </div>

    @if (_datasourceType.IsNullOrEmpty())
        _datasourceType = "0";

    @if ("0".Equals(_datasourceType))
    {
        <div class="propertysetting-item">
            <label>字段：</label>
            <div>@Component.ComponentProperty.Name</div>
        </div>
    }
    else if ("1".Equals(_datasourceType))
    {
        <div class="propertysetting-item">
            <label>API：</label>
            <Input TValue="string" @bind-Value="@Component.DataSource.Value" />
        </div>
    }
    else if ("2".Equals(_datasourceType))
    {
        <div class="propertysetting-item">
            <label>SQL：</label>
            <TextArea @bind-Value="@Component.DataSource.Value" />
        </div>
    }
    else if ("3".Equals(_datasourceType))
    {
        <div class="propertysetting-item">
            <label>表达式：</label>
            <TextArea @bind-Value="@Component.DataSource.Value" />
        </div>
    }
    else if ("4".Equals(_datasourceType))
    {
        <div class="propertysetting-item">
            <label>固定值：</label>
            <TextArea />
        </div>
    }

    @*扩展属性*@
    @if (Component != null && Component.ComponentProperty.ExtensionProperties != null)
    {
        <div style="border-left: 5px solid #d0d4da;padding: 0 0 0 8px; margin:5px 0;">更多</div>

        foreach (var extensionProperty in Component.ComponentProperty.ExtensionProperties)
        {
            <div class="propertysetting-item">
                @if(extensionProperty.IsShowLabel){
                    <label>@extensionProperty.Label：</label>
                }

                @if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Text)
                {
                    <Input TValue="string" @bind-value="@extensionProperty.StringValue" OnChange="(value) => OnPropertyChange()" />
                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Text_Int)
                {
                    <Input TValue="int?" @bind-value="@extensionProperty.IntValue" OnChange="(value) => OnPropertyChange()" />
                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Radio)
                {

                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Checkbox)
                {
                    <Checkbox @bind-checked="@extensionProperty.BoolValue"></Checkbox>
                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Select)
                {

                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Switch)
                {

                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Date)
                {

                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Textarea)
                {

                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Table)
                {
                    <TablePropertyItem PropertyValue="@extensionProperty.StringValue"></TablePropertyItem>
                }

                @if (!string.IsNullOrEmpty(extensionProperty.Description))
                {
                    <div style="color:#c7c7c7">@extensionProperty.Description</div>
                }
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public ComponentSchema Component { get; set; }

    private string _datasourceType { get; set; }

    private void OnPropertyChange()
    {
        Component.RefreshState();
    }
}
