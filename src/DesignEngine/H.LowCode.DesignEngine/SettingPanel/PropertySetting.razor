@if(Component != null)
{
    @if (Component.IsContainerComponent == false)
    {
        <div class="propertysetting-item">
            <label>Name <span style="font-size:10px; color:gray;">(字段名称/英文)</span>：</label>
            <Input TValue="string" @bind-value="@Component.ComponentProperty.Name" OnChange="(value) => OnPropertyChange()" />
        </div>
        <div class="propertysetting-item">
            <label>标题：</label>
            <Input TValue="string" @bind-value="@Component.ComponentProperty.Title" OnChange="(value) => OnPropertyChange()" />
        </div>
        <div class="propertysetting-item">
            <label>描述：</label>
            <TextArea @bind-value="@Component.ComponentProperty.Description" />
        </div>
    }
    @if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.DefaultValue)))
    {
        <div class="propertysetting-item">
            <label>默认值：</label>
            <Input TValue="string" @bind-value="@Component.ComponentProperty.DefaultValue" />
        </div>
    }
    @if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.IsRequired)))
    {
        <div class="propertysetting-item">
            <label>必填：</label>
            <Checkbox @bind-Checked="@Component.ComponentProperty.IsRequired" OnChange="(value) => OnPropertyChange()" />
        </div>
    }

    @*"type": "string"*@
    @if (Component.ComponentProperty.ComponentValueType == ComponentValueType.String)
    {
        if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.MaximumLength)))
        {
            <div class="propertysetting-item">
                <label>最大长度：</label>
                <Input TValue="long?" @bind-value="@Component.ComponentProperty.MaximumLength" OnChange="(value) => OnPropertyChange()" />
            </div>
        }
        if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.MinimumLength)))
        {
            <div class="propertysetting-item">
                <label>最小长度：</label>
                <Input TValue="long?" @bind-value="@Component.ComponentProperty.MinimumLength" OnChange="(value) => OnPropertyChange()" />
            </div>
        }
        if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.Pattern)))
        {
            <div class="propertysetting-item">
                <label>Pattern：</label>
                <Input TValue="string" @bind-value="@Component.ComponentProperty.Pattern" OnChange="(value) => OnPropertyChange()" />
            </div>
        }
        if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.Format)))
        {
            <div class="propertysetting-item">
                <label>Format：</label>
                <Input TValue="string" @bind-value="@Component.ComponentProperty.Format" OnChange="(value) => OnPropertyChange()" />
            </div>
        }
    }

    @*"type": "integer"*@
    @*"type": "number"*@
    @if (Component.ComponentProperty.ComponentValueType == ComponentValueType.Integer || Component.ComponentProperty.ComponentValueType == ComponentValueType.Number)
    {
        if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.Maximum)))
        {
            <div class="propertysetting-item">
                <label>最大值：</label>
                <Input TValue="double?" @bind-value="@Component.ComponentProperty.Maximum" OnChange="(value) => OnPropertyChange()" />
            </div>
        }
        if (Component.ComponentProperty.IsShowProperty(nameof(ComponentPropertySchema.Minimum)))
        {
            <div class="propertysetting-item">
                <label>最小值：</label>
                <Input TValue="double?" @bind-value="@Component.ComponentProperty.Minimum" OnChange="(value) => OnPropertyChange()" />
            </div>
        }
    }
    @*"type": "array"*@
    @*if(Component.ComponentValueType == ComponentValueType.Array)
    {

    }*@

    @*扩展属性*@
    @if (Component.ComponentProperty.ExtensionProperties != null)
    {
        foreach (var extensionProperty in Component.ComponentProperty.ExtensionProperties)
        {
            <div class="propertysetting-item">
                <label>@extensionProperty.Label：</label>
                @if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Text)
                {
                    <Input TValue="string" @bind-value="@extensionProperty.StringValue" OnChange="(value) => OnPropertyChange()" />
                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Text_Int)
                {
                    <Input TValue="int" @bind-value="@extensionProperty.IntValue" OnChange="(value) => OnPropertyChange()" />
                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Radio)
                {
                    
                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Checkbox)
                {
                    <Checkbox @bind-checked="@extensionProperty.BoolValue"></Checkbox>
                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Select)
                {

                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Switch)
                {

                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Date)
                {

                }
                else if (extensionProperty.SettingItemType == PropertyItemTypeEnum.Textarea)
                {

                }

                @if(!string.IsNullOrEmpty(extensionProperty.Description))
                {
                    <div style="color:#c7c7c7">@extensionProperty.Description</div>
                }
            </div>
        }
    }

    @* 高级 RenderFragment 属性 *@
    @if(Component.ComponentProperty.RenderFragmentProperties != null)
    {
        @Component.ComponentProperty.RenderFragmentProperties
    }
}

@code {
    [Parameter]
    public ComponentSchema Component { get; set; }

    private void OnPropertyChange()
    {
        Component.RefreshState();
    }
}
