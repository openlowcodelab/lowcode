@page "/designer/{AppId}/{PageId}"

@layout DesignEngineLayout
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject DragDropStateService DragDropStateService
@inject IMessageService _message

<link href="_content/H.LowCode.DesignEngine/designengine.css" rel="stylesheet" />

<CascadingValue Value="AppId" Name="appId">
    <CascadingValue Value="PageId" Name="pageId">
        <AntDesign.Layout Class="designpage" Style="padding:0 2px; background-color: #f7f7f7;">
            <Header Style="background-color: white; padding:0 20px;">
                <div style="float:left;">
                    <a href="javascript:void(0)"> @("<") 返回 </a>
                </div>
                @*<div style="text-align:center;">
                <Menu Theme="MenuTheme.Light" Mode="MenuMode.Horizontal" DefaultSelectedKeys=@(new[]{"2"})>
                <MenuItem Key="1">PC</MenuItem>
                <MenuItem Key="2">Mobile</MenuItem>
                </Menu>
                </div>*@
                <div style="float:right;">
                    <Button>预览</Button>
                    <Button Type="primary" OnClick="() => SaveMetaSchema()">保存</Button>
                </div>
            </Header>
            <AntDesign.Layout>
                <Sider Style="min-width: 200px; flex: auto; max-width: max-content;" Theme="SiderTheme.Light">
                    <ComponentPanel></ComponentPanel>
                </Sider>
                <Layout>
                    <Content Class="designpage">
                        <DesignPanel @ref="_designPanel"></DesignPanel>
                    </Content>
                </Layout>
                <Sider Class="designpage" Style="flex: auto; max-width: max-content; min-width: 250px;" Theme="SiderTheme.Light">
                    <SettingPanel></SettingPanel>
                </Sider>
            </AntDesign.Layout>
        </AntDesign.Layout>
    </CascadingValue>
</CascadingValue>

@code
{
    [Parameter]
    public string AppId { get; set; }

    [Parameter]
    public string PageId { get; set; } = "newpage";

    private DesignPanel _designPanel;
    private PageSchema _pageSchema;
    private bool _isNewPage;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        LoadPageSchema();
    }

    private async void LoadPageSchema()
    {
        if (string.Equals("newpage", PageId))
        {
            _isNewPage = true;
            PageId = Guid.NewGuid().ToString();
            return;
        }

        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        _pageSchema = await httpClient.GetFromJsonAsync<PageSchema>($"api/designengine/GetPageSchema?appId={AppId}&pageId={PageId}");

        if (_designPanel != null)
            _designPanel.Reload(_pageSchema);
    }

    private async void SaveMetaSchema()
    {
        PageSchema pageSchema = CreatePageSchema();
        if (pageSchema.Components.Count == 0)
        {
            await _message.Warning("没有任何组件，禁止保存！");
            return;
        }

        string jsonSchema = pageSchema.ToJson();

        var content = new StringContent(jsonSchema, Encoding.UTF8, "application/json");

        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);
        var result = await httpClient.PostAsync($"api/designengine/savepageschema", content);

        if (result.StatusCode == HttpStatusCode.OK)
        {
            if (_isNewPage)
            {
                _isNewPage = false;
                NavigationManager.NavigateTo($"/designer/{AppId}/{PageId}");
            }

            await _message.Success("保存成功！");
        }
        else
        {
            await _message.Error($"保存失败: {result.ReasonPhrase}");
        }
    }

    private PageSchema CreatePageSchema()
    {
        if (_pageSchema == null)
            _pageSchema = new PageSchema();

        _pageSchema.AppId = AppId;
        _pageSchema.PageId = PageId;
        _pageSchema.Components = DragDropStateService.GetRootComponent(AppId, PageId).Childrens;
        _pageSchema.PageProperty = DragDropStateService.GetGlobalPageProperty(AppId, PageId);
        _pageSchema.DataSource = new DataSourceSchema() { DataSourceType = DataSourceType.Default };
        return _pageSchema;
    }
}