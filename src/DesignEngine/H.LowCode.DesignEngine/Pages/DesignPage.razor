@page "/designer/{AppId}/{PageId}"

@using System.Net.Http.Json
@using System.Net
@using System.Text.Json.Serialization
@using H.Extensions.System

@layout DesignEngineLayout
@inject HttpClient HttpClient
@inject DragDropStateService DragDropStateService

<link href="_content/H.LowCode.DesignEngine/designengine.css" rel="stylesheet" />

<AntDesign.Layout Class="designpage" Style="padding:5px 2px 10px; background-color: #f7f7f7;">
    <Header Style="background-color: white; padding:0 20px;">
        <div style="float:left;">
            <a href="javascript:void(0)"> @("<") 返回 </a>
        </div>
        @*<div style="text-align:center;">
            <Menu Theme="MenuTheme.Light" Mode="MenuMode.Horizontal" DefaultSelectedKeys=@(new[]{"2"})>
                <MenuItem Key="1">PC</MenuItem>
                <MenuItem Key="2">Mobile</MenuItem>
            </Menu>
        </div>*@
        <div style="float:right;">
            <Button>预览</Button>
            <Button Type="primary" OnClick="() => SaveMetaSchema()">保存</Button>
        </div>
    </Header>
    <AntDesign.Layout>
        <Sider Style="flex: auto; max-width: max-content; min-width: 200px;" Theme="SiderTheme.Light">
            <ComponentPanel></ComponentPanel>
        </Sider>
        <Layout>
            <Content Class="designpage">
                <DesignPanel></DesignPanel>
            </Content>
            @if ("form".Equals(PageType, StringComparison.OrdinalIgnoreCase))
            {
                <Footer Style="padding:10px 20px;">
                    <div style="float:left;">
                        <Button Type="primary">提交</Button>
                        <Button>取消</Button>
                    </div>
                </Footer>
            }
        </Layout>
        <Sider Class="designpage" Style="flex: auto; max-width: max-content; min-width: 250px;" Theme="SiderTheme.Light">
            <SettingPanel></SettingPanel>
        </Sider>
    </AntDesign.Layout>
</AntDesign.Layout>

@code
{
    [Parameter]
    public string AppId { get; set; }

    [Parameter]
    public string PageId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public string PageType { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        LoadPageSchema();
    }

    private async void SaveMetaSchema()
    {
        PageSchema pageSchema = GetPageSchema();
        string jsonSchema = pageSchema.ToJson();

        //PostAsync
        var parameters = new List<KeyValuePair<string, string>>() 
        {
            new KeyValuePair<string, string>("appId", AppId),
            new KeyValuePair<string, string>("pageId", PageId),
            new KeyValuePair<string, string>("pageSchema", jsonSchema)
        };
        var httpContent = new FormUrlEncodedContent(parameters);
        var result = await HttpClient.PostAsync("api/designengine/savepageschema", httpContent);

        if (result.StatusCode == HttpStatusCode.OK)
        {
            var responseJson = await result.Content.ReadAsStringAsync();
        }
    }

    private async void LoadPageSchema()
    {
        if (string.IsNullOrEmpty(AppId) || string.IsNullOrEmpty(PageId))
            return;

        var result = await HttpClient.GetAsync($"api/designengine/loadpageschema?appId={AppId}&pageId={PageId}");

        if (result.StatusCode == HttpStatusCode.OK)
        {
            var responseJson = await result.Content.ReadAsStringAsync();

        }
    }

    private PageSchema GetPageSchema()
    {
        PageSchema pageSchema = new PageSchema();
        pageSchema.Components = DragDropStateService.RootComponent.Childrens;
        pageSchema.PageProperty = DragDropStateService.GlobalPageProperty;
        pageSchema.DataSource = new DataSourceSchema() { DataSourceType = DataSourceType.API };
        return pageSchema;
    }
}