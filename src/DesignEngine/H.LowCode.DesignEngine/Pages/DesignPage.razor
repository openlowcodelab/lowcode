@page "/designer/{AppId}/{PageId}"

@layout DesignEngineLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject DragDropStateService DragDropStateService

<link href="_content/H.LowCode.DesignEngine/designengine.css" rel="stylesheet" />

<AntDesign.Layout Class="designpage" Style="padding:5px 2px 10px; background-color: #f7f7f7;">
    <Header Style="background-color: white; padding:0 20px;">
        <div style="float:left;">
            <a href="javascript:void(0)"> @("<") 返回 </a>
        </div>
        @*<div style="text-align:center;">
            <Menu Theme="MenuTheme.Light" Mode="MenuMode.Horizontal" DefaultSelectedKeys=@(new[]{"2"})>
                <MenuItem Key="1">PC</MenuItem>
                <MenuItem Key="2">Mobile</MenuItem>
            </Menu>
        </div>*@
        <div style="float:right;">
            <Button>预览</Button>
            <Button Type="primary" OnClick="() => SaveMetaSchema()">保存</Button>
        </div>
    </Header>
    <AntDesign.Layout>
        <Sider Style="flex: auto; max-width: max-content; min-width: 200px;" Theme="SiderTheme.Light">
            <ComponentPanel></ComponentPanel>
        </Sider>
        <Layout>
            <Content Class="designpage">
                <DesignPanel @ref="_designPanel"></DesignPanel>
            </Content>
        </Layout>
        <Sider Class="designpage" Style="flex: auto; max-width: max-content; min-width: 250px;" Theme="SiderTheme.Light">
            <SettingPanel></SettingPanel>
        </Sider>
    </AntDesign.Layout>
</AntDesign.Layout>

@code
{
    [Parameter]
    public string AppId { get; set; }

    [Parameter]
    public string PageId { get; set; } = "newpage";

    private DesignPanel _designPanel;
    private PageSchema _pageSchema;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        HttpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        LoadPageSchema();
    }

    private async void LoadPageSchema()
    {
        if (string.Equals("newpage", PageId))
        {
            PageId = Guid.NewGuid().ToString();
            return;
        }

        _pageSchema = await HttpClient.GetFromJsonAsync<PageSchema>($"api/designengine/GetPageSchema?appId={AppId}&pageId={PageId}");

        if (_designPanel != null)
            _designPanel.Reload(_pageSchema);
    }

    private async void SaveMetaSchema()
    {
        PageSchema pageSchema = CreatePageSchema();
        string jsonSchema = pageSchema.ToJson();

        var content = new StringContent(jsonSchema, Encoding.UTF8, "application/json");
        var result = await HttpClient.PostAsync($"api/designengine/savepageschema", content);

        if (result.StatusCode == HttpStatusCode.OK)
        {
            var responseJson = await result.Content.ReadAsStringAsync();
        }
    }

    private PageSchema CreatePageSchema()
    {
        if (_pageSchema == null)
            _pageSchema = new PageSchema();

        _pageSchema.AppId = AppId;
        _pageSchema.PageId = PageId;
        _pageSchema.Components = DragDropStateService.RootComponent.Childrens;
        _pageSchema.PageProperty = DragDropStateService.GlobalPageProperty;
        _pageSchema.DataSource = new DataSourceSchema() { DataSourceType = DataSourceType.API };
        return _pageSchema;
    }
}