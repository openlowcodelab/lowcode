@page "/designer/{AppId}/{PageId}"
@namespace H.LowCode.DesignEngine
@inherits LowCodePageComponentBase
@layout DesignEngineLayout

@inject IHttpClientFactory HttpClientFactory
@inject DragDropStateService DragDropStateService
@inject IMessageService _message

<PageTitle>@($"{_pageCascadingModel.PageName} - 页面设计器")</PageTitle>

<link href="_content/H.LowCode.DesignEngine/designengine.css" rel="stylesheet" />

<CascadingValue Value="@_pageCascadingModel" Name="pageCascading">
    <AntDesign.Layout Class="designpage" Style="padding:0 2px; background-color: #f7f7f7;">
        <Header Style="background-color: white; padding:0 20px;">
            <div style="float:left;">
                <a href="javascript:void(0)"> @("<") 返回 </a>
            </div>
            @*<div style="text-align:center;">
            <Menu Theme="MenuTheme.Light" Mode="MenuMode.Horizontal" DefaultSelectedKeys=@(new[]{"2"})>
            <MenuItem Key="1">PC</MenuItem>
            <MenuItem Key="2">Mobile</MenuItem>
            </Menu>
            </div>*@
            <div style="float:right;">
                <Button>预览</Button>
                <Button Type="primary" OnClick="() => SavePageSchemaAsync()">保存</Button>
            </div>
        </Header>
        <AntDesign.Layout>
            <Sider Style="min-width: 200px; flex: auto; max-width: max-content;" Theme="SiderTheme.Light">
                <ComponentPanel></ComponentPanel>
            </Sider>
            <Layout>
                <Content Class="designpage">
                    <DesignPanel @ref="_designPanel"></DesignPanel>
                </Content>
            </Layout>
            <Sider Class="designpage" Style="flex: auto; max-width: max-content; min-width: 250px;" Theme="SiderTheme.Light">
                <SettingPanel></SettingPanel>
            </Sider>
        </AntDesign.Layout>
    </AntDesign.Layout>
</CascadingValue>

@code
{
    [Parameter]
    public string AppId { get; set; }

    [Parameter]
    public string PageId { get; set; }

    private DesignPanel _designPanel;

    private PageSchema _pageSchema;
    private PageCascadingModel _pageCascadingModel;
    private bool _isNewPage;

    protected override async Task OnInitializedAsync()
    {
        _pageCascadingModel = new() { AppId = AppId, PageId = PageId, PageName = "..." };

        _pageSchema = await LoadPageSchemaAsync();
        SetPageCascadingModel(_pageSchema);

        await base.OnInitializedAsync();
    }

    private async Task<PageSchema> LoadPageSchemaAsync()
    {
        if (string.Equals("_empty", PageId))
        {
            _isNewPage = true;
            var newPage = new PageSchema() { AppId = AppId, Name = "newpage" };
            PageId = newPage.Id;

            DragDropStateService.SetPage(AppId, newPage);
            return newPage;
        }

        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = base.GetBaseUri();

        var pageSchema = await httpClient.GetFromJsonAsync<PageSchema>($"api/designengine/getpage?appId={AppId}&pageId={PageId}");

        if (_designPanel != null)
        {
            DragDropStateService.SetPage(AppId, pageSchema);
            _designPanel.Reload(pageSchema);
        }

        return pageSchema;
    }

    private async Task SavePageSchemaAsync()
    {
        PageSchema pageSchema = CreatePageSchema();
        if (pageSchema.Components.Count == 0)
        {
            await _message.Warning("没有任何组件，禁止保存！");
            return;
        }

        string jsonSchema = pageSchema.ToJson();

        var content = new StringContent(jsonSchema, Encoding.UTF8, "application/json");

        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = base.GetBaseUri();
        var result = await httpClient.PostAsync($"api/designengine/savepage", content);

        if (result.StatusCode == HttpStatusCode.OK)
        {
            if (_isNewPage)
            {
                _isNewPage = false;
                base.NavigateTo($"/designer/{pageSchema.AppId}/{pageSchema.Id}");
            }

            await _message.Success("保存成功！");
        }
        else
        {
            await _message.Error($"保存失败: {result.ReasonPhrase}");
        }
    }

    private PageSchema CreatePageSchema()
    {
        if (_pageSchema == null)
            throw new NullReferenceException(nameof(_pageSchema));

        _pageSchema.Components = DragDropStateService.GetRootComponent(_pageSchema.AppId, _pageSchema.Id).Childrens;
        _pageSchema.PageProperty = DragDropStateService.GetGlobalPageProperty(AppId, PageId);
        _pageSchema.DataSource = new DataSourceSchema() { DataSourceType = DataSourceTypeEnum.Table };
        return _pageSchema;
    }

    private void SetPageCascadingModel(PageSchema pageSchema)
    {
        _pageCascadingModel.PageName = pageSchema.Name;
        _pageCascadingModel.PageLayout = pageSchema.PageProperty.PageLayout;
    }
}