@inject DragDropStateService DragDropStateService
@implements IDisposable

<div class="dropitemcontainer @_dropItemContainerSchema.Class" style="@_dropItemContainerSchema.Style"
     @onclick="OnClick"
     @ondrop="OnDrop" @ondrop:preventDefault @ondrop:stopPropagation
     @ondragover="(e) => { }" @ondragover:preventDefault @ondragover:stopPropagation>
     
    @if (_dropItemContainerSchema.ComponentSchemas.Any())
    {
        @foreach (var component in _dropItemContainerSchema.ComponentSchemas)
        {
            <DropItem Style="@(_dropItemContainerSchema.Style)" ComponentSchema="component"
                OnItemClick="OnItemClick" OnItemDelete="OnItemDelete" OnItemCopy="OnItemCopy" />
        }
    }
</div>

@code {
    #region Parameter
    [Parameter]
    public DropItemContainerSchema ParentDropItemContainerSchema{ get; set; }

    private DropItemContainerSchema _dropItemContainerSchema { get; set; }
    #endregion

    #region Init
    protected override void OnInitialized()
    {
        Init();
        RegisterEventDispatcher();

        base.OnInitialized();
    }

    private void Init()
    {
        if (_dropItemContainerSchema == null){
            _dropItemContainerSchema = new DropItemContainerSchema();
            _dropItemContainerSchema.Refresh = Refresh;
        }

        if (ParentDropItemContainerSchema == null)
            ParentDropItemContainerSchema = DragDropStateService.ParentDropItemContainerSchema;

        _dropItemContainerSchema.ParentDropItemContainerSchema = ParentDropItemContainerSchema;

        if (ParentDropItemContainerSchema != null)
            ParentDropItemContainerSchema.ChildDropItemContainerSchema.Add(_dropItemContainerSchema);
    }

    private void RegisterEventDispatcher()
    {
        //订阅设计面板取消选中事件
        BlazorEventDispatcher.RegisterEvent("designengine.dropitem.onblur", (value) =>
        {
            //取消选中项
            if (DragDropStateService.LastSelectedComponent != null)
            {
                DragDropStateService.LastSelectedComponent.IsSelected = false;
                Refresh();
            }
        });

        //根容器才订阅组件点击事件 - 添加组件
        if (ParentDropItemContainerSchema == DragDropStateService.RootDropItemContainerSchema)
        {
            //订阅左侧组件面板中的组件点击事件
            BlazorEventDispatcher.RegisterEvent("designengine.dragitem.onclick", (value) =>
            {
                DragComponentHandler((ComponentSchema)value);
            });
        }
    }
    #endregion

    #region Event
    private void OnDrop()
    {
        DragComponentHandler(DragDropStateService.CurrentDragComponent);

        //重置拖拽样式
        DragDropStateService.ResetComponentStyle();
    }

    private void OnClick()
    {
        BlazorEventDispatcher.Trigger("designengine.dropitem.onblur", null);
    }

    private void OnItemClick(ComponentSchema componentSchema)
    {
        //取消上一个选中，设置当前选中项
        if (DragDropStateService.LastSelectedComponent != null)
            DragDropStateService.LastSelectedComponent.IsSelected = false;

        componentSchema.IsSelected = true;
        DragDropStateService.LastSelectedComponent = componentSchema;

        StateHasChanged();
    }

    private void OnItemDelete(ComponentSchema componentSchema)
    {
        //将下一个设为选中
        int index = _dropItemContainerSchema.ComponentSchemas.IndexOf(componentSchema);
        if (_dropItemContainerSchema.ComponentSchemas.Count > 1)
        {
            int next = index + 1 >= _dropItemContainerSchema.ComponentSchemas.Count ? index - 1 : index + 1;
            _dropItemContainerSchema.ComponentSchemas[next].IsSelected = true;
            DragDropStateService.LastSelectedComponent = _dropItemContainerSchema.ComponentSchemas[next];
        }
        _dropItemContainerSchema.ComponentSchemas.Remove(componentSchema);
        StateHasChanged();
    }

    private void OnItemCopy(ComponentSchema componentSchema)
    {
        componentSchema.IsSelected = false;
        DragItem_Add(_dropItemContainerSchema.ComponentSchemas, componentSchema, true);
        Refresh();
    }
    #endregion

    #region private
    /// <summary>
    /// 拖动 ComponentSchema 完成时处理
    /// </summary>
    /// <param name="componentSchema"></param>
    private void DragComponentHandler(ComponentSchema componentSchema)
    {
        //设置当前容器的父级容器
        //DragDropStateService.ParentDropItemContainerSchema = _dropItemContainerSchema;

        // 如果组件来源于 ComponentPanel，则新增
        if (componentSchema.IsDroppedFromComponentPanel)
        {
            DragItem_Add(_dropItemContainerSchema.ComponentSchemas, componentSchema);
        }
        else  // 如果组件在 DesignPanel 内部拖拽
        {
            //是否跨 DropItemContainer 移动
            bool isChangeContainer = (componentSchema.ParentDropItemContainerSchema.Equals(_dropItemContainerSchema) == false);
            if (isChangeContainer)   //如果跨 DropItemContainer 拖拽，则移动同时设置顺序
            {
                Console.WriteLine("change");
                DragItem_Move(_dropItemContainerSchema, componentSchema.ParentDropItemContainerSchema, componentSchema);
            }
            else     // 如果在同一个 DropItemContainer 内拖拽，则移动顺序
            {
                Console.WriteLine("sorting");
                DropItem_Sorting(DragDropStateService.LastDragOverComponent, componentSchema);
            }
        }

        Refresh();
    }

    /// <summary>
    /// 新增 DragItem
    /// </summary>
    /// <param name="componentSchemas"></param>
    /// <param name="componentSchema"></param>
    /// <param name="isSelected"></param>
    private void DragItem_Add(IList<ComponentSchema> componentSchemas, ComponentSchema componentSchema, bool isSelected = false)
    {
        var dropComponentSchema = componentSchema;//.DeepClone();
        dropComponentSchema.ParentDropItemContainerSchema = _dropItemContainerSchema;
        dropComponentSchema.IsDroppedFromComponentPanel = false;
        if (isSelected)
        {
            dropComponentSchema.IsSelected = isSelected;
            DragDropStateService.LastSelectedComponent = dropComponentSchema;
        }
        componentSchemas.Add(dropComponentSchema);
    }

    /// <summary>
    /// 跨 DropItemContainer 移动 DropItem
    /// </summary>
    /// <param name="newDropItemContainerSchema"></param>
    /// <param name="oldDropItemContainerSchema"></param>
    /// <param name="componentSchema"></param>
    private void DragItem_Move(DropItemContainerSchema newDropItemContainerSchema, DropItemContainerSchema oldDropItemContainerSchema, ComponentSchema componentSchema)
    {
        //当前 DropItemContainer 新增
        componentSchema.ParentDropItemContainerSchema = newDropItemContainerSchema;
        DragItem_Add(newDropItemContainerSchema.ComponentSchemas, componentSchema);

        //上一个 DropItemContainer 移除
        oldDropItemContainerSchema.ComponentSchemas.Remove(componentSchema);
        oldDropItemContainerSchema.Refresh_StateChange();  //刷新上一个 DropItemContainer，使 Remove 立即生效
    }

    /// <summary>
    /// 排序 DragItem
    /// </summary>
    /// <param name="dragOverComponent"></param>
    /// <param name="currentDragComponent"></param>
    private void DropItem_Sorting(ComponentSchema dragOverComponent, ComponentSchema currentDragComponent)
    {
        if (dragOverComponent == null)
            return;

        if (currentDragComponent == DragDropStateService.LastDragOverComponent)
            return;

        var indexDraggedOverItem = _dropItemContainerSchema.ComponentSchemas.IndexOf(dragOverComponent);
        if (dragOverComponent.IsDroppedToBack == false)
            indexDraggedOverItem -= 1;

        if (indexDraggedOverItem < 0)
            indexDraggedOverItem = 0;
        if (indexDraggedOverItem > _dropItemContainerSchema.ComponentSchemas.Count)
            indexDraggedOverItem = _dropItemContainerSchema.ComponentSchemas.Count - 1;

        //先移除，再插入对应位置
        _dropItemContainerSchema.ComponentSchemas.Remove(currentDragComponent);
        _dropItemContainerSchema.ComponentSchemas.Insert(indexDraggedOverItem, currentDragComponent);
    }

    private void Refresh()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        DragDropStateService.ResetComponent();
    }
    #endregion
}