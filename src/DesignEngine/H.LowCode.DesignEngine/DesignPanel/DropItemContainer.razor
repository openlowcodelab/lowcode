@inject DragDropStateService DragDropStateService
@implements IDisposable

<div class="dropitemcontainer" @ondragover="(e)=>{}" @ondragover:preventDefault @ondragover:stopPropagation
     @onclick="OnClick" @ondrop="OnDrop" @ondrop:preventDefault @ondrop:stopPropagation>

    @foreach (var component in ParentComponent.Childrens)
    {
        <DropItem Component="component" OnItemClick="OnItemClick" OnItemDelete="OnItemDelete" OnItemCopy="OnItemCopy" />
    }
</div>

@code {
    #region Parameter
    [Parameter]
    public ComponentSchema ParentComponent { get; set; }
    #endregion

    #region Init
    protected override void OnInitialized()
    {
        Init();

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            RegisterEventDispatcher();
    }

    private void Init()
    {
        if (ParentComponent == null)
            throw new NullReferenceException(nameof(ParentComponent));
    }

    private void RegisterEventDispatcher()
    {
        //订阅设计面板取消选中事件
        BlazorEventDispatcher.RegisterEvent("designengine.dropitem.onblur", (value) =>
        {
            //取消选中项
            if (DragDropStateService.LastSelectedComponent != null)
            {
                DragDropStateService.LastSelectedComponent.IsSelected = false;
                StateHasChanged();
            }
        });

        //根容器才订阅组件点击事件 - 添加组件
        if (ReferenceEquals(ParentComponent, DragDropStateService.RootComponent))
        {
            //订阅左侧组件面板中的组件点击事件
            BlazorEventDispatcher.RegisterEvent("designengine.dragitem.onclick", (value) =>
            {
                DragDropHandler((ComponentSchema)value);
            });
        }
    }
    #endregion

    #region Event
    private void OnDrop()
    {
        DragDropHandler(DragDropStateService.CurrentDragComponent);

        //重置拖拽样式
        DragDropStateService.ResetComponentStyle();
    }

    private void OnClick()
    {
        BlazorEventDispatcher.Trigger("designengine.dropitem.onblur", null);
    }

    private void OnItemClick(ComponentSchema component)
    {
        //取消上一个选中，设置当前选中项
        if (DragDropStateService.LastSelectedComponent != null)
            DragDropStateService.LastSelectedComponent.IsSelected = false;

        component.IsSelected = true;
        DragDropStateService.LastSelectedComponent = component;

        StateHasChanged();
    }

    private void OnItemDelete(ComponentSchema component)
    {
        DropItem_Remove(ParentComponent, component);
        StateHasChanged();
    }

    private void OnItemCopy(ComponentSchema component)
    {
        component.IsSelected = false;
        DragItem_Add(ParentComponent, component, DragDropStateService.CurrentDragComponent, true);
        StateHasChanged();
    }
    #endregion

    #region private
    /// <summary>
    /// 拖动 ComponentSchema 释放时处理逻辑
    /// </summary>
    /// <param name="currentDragComponent"></param>
    private void DragDropHandler(ComponentSchema currentDragComponent)
    {
        // 组件来源于 ComponentPanel，新增
        if (currentDragComponent.IsDroppedFromComponentPanel)
        {
            DragItem_Add(ParentComponent, currentDragComponent, DragDropStateService.LastDragOverComponent);
        }
        else  // 组件在 DesignPanel 内部拖拽
        {
            bool isSameContainer = ReferenceEquals(ParentComponent, currentDragComponent);
            Console.WriteLine($"isSameContainer: {isSameContainer}");
            if (isSameContainer)     //同一个 DropItemContainer 内拖拽，排序
            {
                DropItem_Sorting(ParentComponent, currentDragComponent, DragDropStateService.LastDragOverComponent);
            }
            else   //跨 DropItemContainer 拖拽
            {
                DragItem_Move(ParentComponent, currentDragComponent, DragDropStateService.LastDragOverComponent);
            }
        }

        StateHasChanged();

        //拖拽释放后将 LastDragOverComponent 置空（避免下一次(如空白区或Copy按钮)拖拽无放置区时，读取到了上次的放置区）
        DragDropStateService.LastDragOverComponent = null;
    }

    /// <summary>
    /// 新增 DragItem
    /// </summary>
    /// <param name="parentComponent"></param>
    /// <param name="dragComponent"></param>
    /// <param name="isSelected"></param>
    private void DragItem_Add(ComponentSchema parentComponent, ComponentSchema currentDragComponent, ComponentSchema dragOverComponent, bool isSelected = false)
    {
        currentDragComponent.ParentId = parentComponent.Id;
        currentDragComponent.IsDroppedFromComponentPanel = false;

        //容器内组件宽度始终100%填充 (除根容器外)
        if (ReferenceEquals(ParentComponent, DragDropStateService.RootComponent) == false)
            currentDragComponent.ComponentPropertySchema.ItemWidth = 24;

        if (isSelected)
        {
            currentDragComponent.IsSelected = isSelected;
            DragDropStateService.LastSelectedComponent = currentDragComponent;
        }
        currentDragComponent.Refresh = StateHasChanged;

        //如果拖拽到放置区对象上方，按照顺序添加
        if (dragOverComponent != null)
        {
            if (dragOverComponent.IsDropAfter)
                parentComponent.Childrens.InsertAfter(dragOverComponent, currentDragComponent);
            else
                parentComponent.Childrens.InsertBefore(dragOverComponent, currentDragComponent);
        }
        else    //添加到末尾
        {
            parentComponent.Childrens.Add(currentDragComponent);
        }
    }

    /// <summary>
    /// 跨 DropItemContainer 移动 DropItem
    /// </summary>
    /// <param name="newParentComponent"></param>
    /// <param name="dragComponent"></param>
    /// <param name="dragOverComponent"></param>
    private void DragItem_Move(ComponentSchema newParentComponent, ComponentSchema currentDragComponent, ComponentSchema dragOverComponent)
    {
        //上一个 DropItemContainer 移除
        var oldParentComponent = DragDropStateService.FindComponentById(currentDragComponent.ParentId);
        oldParentComponent.Childrens.Remove(currentDragComponent);
        oldParentComponent.RefreshState();  //刷新上一个 DropItemContainer，使 Remove 立即生效

        //当前 DropItemContainer 新增
        currentDragComponent.ParentId = newParentComponent.Id;
        DragItem_Add(newParentComponent, currentDragComponent, dragOverComponent);
    }

    /// <summary>
    /// 排序 DragItem
    /// </summary>
    /// <param name="parentComponent"></param>
    /// <param name="currentDragComponent"></param>
    /// <param name="dragOverComponent"></param>
    private void DropItem_Sorting(ComponentSchema parentComponent, ComponentSchema currentDragComponent, ComponentSchema dragOverComponent)
    {
        if (dragOverComponent == null)
            return;

        if (currentDragComponent == DragDropStateService.LastDragOverComponent)
            return;

        if (dragOverComponent.IsDropAfter)
            parentComponent.Childrens.InsertAfter(dragOverComponent, currentDragComponent);
        else
            parentComponent.Childrens.InsertBefore(dragOverComponent, currentDragComponent);

        // var indexDraggedOverItem = parentComponent.Childrens.IndexOf(dragOverComponent);
        // if (dragOverComponent.IsDroppedToBack == false)
        //     indexDraggedOverItem -= 1;

        // if (indexDraggedOverItem < 0)
        //     indexDraggedOverItem = 0;
        // if (indexDraggedOverItem > parentComponent.Childrens.Count)
        //     indexDraggedOverItem = parentComponent.Childrens.Count - 1;

        // //先移除，再插入对应位置
        // if (parentComponent.Childrens.Contains(currentDragComponent))
        //     parentComponent.Childrens.Remove(currentDragComponent);
        // parentComponent.Childrens.Insert(indexDraggedOverItem, currentDragComponent);
    }

    private void DropItem_Remove(ComponentSchema parentComponent, ComponentSchema component)
    {
        //将下一个设为选中
        int index = parentComponent.Childrens.IndexOf(component);
        if (parentComponent.Childrens.Count > 1)
        {
            int next = index + 1 >= parentComponent.Childrens.Count ? index - 1 : index + 1;
            parentComponent.Childrens[next].IsSelected = true;
            DragDropStateService.LastSelectedComponent = parentComponent.Childrens[next];
        }
        parentComponent.Childrens.Remove(component);
    }

    public void Dispose()
    {
        DragDropStateService.ResetComponent();
    }
    #endregion
}