@inject DragDropStateService DragDropStateService
@implements IDisposable

<div class="dropitemcontainer" @ondragover="(e)=>{}" @ondragover:preventDefault @ondragover:stopPropagation
     @onclick="OnClick" @ondrop="OnDrop" @ondrop:preventDefault @ondrop:stopPropagation>

    @foreach (var component in ParentComponent.Childrens)
    {
        <DropItem Component="component" OnItemClick="OnItemClick" OnItemDelete="OnItemDelete" OnItemCopy="OnItemCopy" />
    }
</div>

@code {
    #region Parameter
    [Parameter]
    public ComponentSchema ParentComponent { get; set; }
    #endregion

    #region Init
    protected override void OnInitialized()
    {
        Init();

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            RegisterEventDispatcher();
    }

    private void Init()
    {
        if (ParentComponent == null)
            throw new NullReferenceException(nameof(ParentComponent));
    }

    private void RegisterEventDispatcher()
    {
        //订阅设计面板取消选中事件
        BlazorEventDispatcher.RegisterEvent("designengine.dropitem.onblur", (value) =>
        {
            //取消选中项
            if (DragDropStateService.LastSelectedComponent != null)
            {
                DragDropStateService.LastSelectedComponent.IsSelected = false;
                StateHasChanged();
            }
        });

        //根容器才订阅组件点击事件 - 添加组件
        if (ReferenceEquals(ParentComponent, DragDropStateService.RootComponent))
        {
            //订阅左侧组件面板中的组件点击事件
            BlazorEventDispatcher.RegisterEvent("designengine.dragitem.onclick", (value) =>
            {
                DropHandler((ComponentSchema)value);
            });
        }
    }
    #endregion

    #region Event
    private void OnDrop()
    {
        DropHandler(DragDropStateService.CurrentDragComponent);

        //重置拖拽样式
        DragDropStateService.ResetComponentStyle();
    }

    private void OnClick()
    {
        BlazorEventDispatcher.Trigger("designengine.dropitem.onblur", null);
    }

    private void OnItemClick(ComponentSchema componentSchema)
    {
        //取消上一个选中，设置当前选中项
        if (DragDropStateService.LastSelectedComponent != null)
            DragDropStateService.LastSelectedComponent.IsSelected = false;

        componentSchema.IsSelected = true;
        DragDropStateService.LastSelectedComponent = componentSchema;

        StateHasChanged();
    }

    private void OnItemDelete(ComponentSchema componentSchema)
    {
        DropItem_Remove(componentSchema);
        StateHasChanged();
    }

    private void OnItemCopy(ComponentSchema componentSchema)
    {
        componentSchema.IsSelected = false;
        DragItem_Add(ParentComponent, componentSchema, true);
        StateHasChanged();
    }
    #endregion

    #region private
    /// <summary>
    /// 拖动 ComponentSchema 释放时处理逻辑
    /// </summary>
    /// <param name="componentSchema"></param>
    private void DropHandler(ComponentSchema componentSchema)
    {
        // 组件来源于 ComponentPanel，新增
        if (componentSchema.IsDroppedFromComponentPanel)
        {
            DragItem_Add(ParentComponent, componentSchema);
        }
        else  // 组件在 DesignPanel 内部拖拽
        {
            bool isInnerContainer = ReferenceEquals(componentSchema, ParentComponent);
            if (isInnerContainer)     //同一个 DropItemContainer 内拖拽，排序
            {
                DropItem_Sorting(DragDropStateService.LastDragOverComponent, componentSchema);
            }
            else   //跨 DropItemContainer 拖拽
            {
                DragItem_Move(ParentComponent, componentSchema);
            }
        }

        StateHasChanged();
    }

    /// <summary>
    /// 新增 DragItem
    /// </summary>
    /// <param name="componentSchemas"></param>
    /// <param name="componentSchema"></param>
    /// <param name="isSelected"></param>
    private void DragItem_Add(ComponentSchema parentComponent, ComponentSchema dragComponent, bool isSelected = false)
    {
        //var dropComponentSchema = dragComponent;//.DeepClone();
        dragComponent.ParentId = parentComponent.Id;
        dragComponent.IsDroppedFromComponentPanel = false;
        if (isSelected)
        {
            dragComponent.IsSelected = isSelected;
            DragDropStateService.LastSelectedComponent = dragComponent;
        }
        dragComponent.Refresh = StateHasChanged;

        parentComponent.Childrens.Add(dragComponent);
    }

    /// <summary>
    /// 跨 DropItemContainer 移动 DropItem
    /// </summary>
    /// <param name="newComponent"></param>
    /// <param name="componentSchema"></param>
    private void DragItem_Move(ComponentSchema newParentComponent, ComponentSchema dragComponent)
    {
        //上一个 DropItemContainer 移除
        var oldParentComponent = DragDropStateService.FindComponentById(dragComponent.ParentId);
        oldParentComponent.Childrens.Remove(dragComponent);
        oldParentComponent.RefreshState();  //刷新上一个 DropItemContainer，使 Remove 立即生效

        //当前 DropItemContainer 新增
        dragComponent.ParentId = newParentComponent.Id;
        DragItem_Add(newParentComponent, dragComponent);
    }

    /// <summary>
    /// 排序 DragItem
    /// </summary>
    /// <param name="dragOverComponent"></param>
    /// <param name="currentDragComponent"></param>
    private void DropItem_Sorting(ComponentSchema dragOverComponent, ComponentSchema currentDragComponent)
    {
        if (dragOverComponent == null)
            return;

        if (currentDragComponent == DragDropStateService.LastDragOverComponent)
            return;

        var indexDraggedOverItem = ParentComponent.Childrens.IndexOf(dragOverComponent);
        if (dragOverComponent.IsDroppedToBack == false)
            indexDraggedOverItem -= 1;

        if (indexDraggedOverItem < 0)
            indexDraggedOverItem = 0;
        if (indexDraggedOverItem > ParentComponent.Childrens.Count)
            indexDraggedOverItem = ParentComponent.Childrens.Count - 1;

        //先移除，再插入对应位置
        ParentComponent.Childrens.Remove(currentDragComponent);
        ParentComponent.Childrens.Insert(indexDraggedOverItem, currentDragComponent);
    }

    private void DropItem_Remove(ComponentSchema componentSchema)
    {
        //将下一个设为选中
        int index = ParentComponent.Childrens.IndexOf(componentSchema);
        if (ParentComponent.Childrens.Count > 1)
        {
            int next = index + 1 >= ParentComponent.Childrens.Count ? index - 1 : index + 1;
            ParentComponent.Childrens[next].IsSelected = true;
            DragDropStateService.LastSelectedComponent = ParentComponent.Childrens[next];
        }
        ParentComponent.Childrens.Remove(componentSchema);
    }

    public void Dispose()
    {
        DragDropStateService.ResetComponent();
    }
    #endregion
}