@inject DragDropStateService DragDropStateService
@implements IDisposable

<div class="@_DropItemContainerSchema.Class" style="height:100%; @_DropItemContainerSchema.Style" ondragstart="event.dataTransfer.setData('text', event.target.id);"
     @onclick="OnClick"
     @ondrop="OnDrop" @ondrop:preventDefault @ondrop:stopPropagation
     @ondragover="OnDragOver" @ondragover:preventDefault @ondragover:stopPropagation>
     
    @if (_DropItemContainerSchema != null)
    {
        @foreach (var component in _DropItemContainerSchema.ComponentSchemas)
        {
            DropItemType dropItemType = DropItemType.Component;
            if (component.ComponentCategory == ComponentCategory.Layout)
            {
                dropItemType = DropItemType.Layout;
            }
            <DropItem DropItemType="@dropItemType" Style="@_DropItemContainerSchema.Style" @ref="currentDropItem" ComponentSchema="component" OnItemClick="OnItemClick" OnItemDelete="OnItemDelete" OnItemCopy="OnItemCopy">
            </DropItem>
        }
    }
</div>

@code {
    #region Parameter
    [Parameter]
    public DropItemContainerSchema ParentDropItemContainerSchema{ get; set; }

    public DropItemContainerSchema _DropItemContainerSchema { get; set; }
    #endregion

    private DropItem currentDropItem { get; set; }

    #region Init
    protected override void OnInitialized()
    {
        Init();
        RegisterEventDispatcher();

        base.OnInitialized();
    }

    private void Init()
    {
        if (_DropItemContainerSchema == null)
            _DropItemContainerSchema = new DropItemContainerSchema();
        if (ParentDropItemContainerSchema == null)
            ParentDropItemContainerSchema = DragDropStateService.ParentDropItemContainerSchema;

        ParentDropItemContainerSchema.ChildDropItemContainerSchema.Add(_DropItemContainerSchema);
    }

    private void RegisterEventDispatcher()
    {
        //订阅设计面板取消选中事件
        BlazorEventDispatcher.RegisterEvent("designengine.dropitem.onblur", (value) =>
        {
            //取消选中项
            if (DragDropStateService.LastSelectedComponent != null)
            {
                DragDropStateService.LastSelectedComponent.IsSelected = false;
                StateHasChanged();
            }
        });

        //根容器才订阅组件点击事件 - 添加组件
        if (ParentDropItemContainerSchema == DragDropStateService.RootDropItemContainerSchema)
        {
            //订阅左侧组件面板中的组件点击事件
            BlazorEventDispatcher.RegisterEvent("designengine.dragitem.onclick", (value) =>
            {
                DragDropStateService.DragItem_Add(_DropItemContainerSchema.ComponentSchemas, (ComponentSchema)value);
                StateHasChanged();
            });
        }
    }
    #endregion

    #region Event
    private void OnDrop()
    {
        var currentDragComponent = DragDropStateService.CurrentDragComponent;
        //设置父级容器
        DragDropStateService.ParentDropItemContainerSchema = _DropItemContainerSchema;

        //源拖拽区才新增，目标拖拽区只移动
        DragDropStateService.DropItem_DragEnd_Style();

        // 设置子组件对象
        if (currentDragComponent.IsDroppedFromComponentPanel == false)
        {
            DragDropStateService.DragItem_Add(_DropItemContainerSchema.ComponentSchemas, currentDragComponent);
        }
        else
        {
            DropItemSorting(DragDropStateService.LastDragOverComponent, currentDragComponent);
        }

        StateHasChanged();
    }

    private void OnDragOver(DragEventArgs dragEventArgs)
    {
        //Style = "border: 2px dashed #1890ff;";
    }

    private void OnClick()
    {
        BlazorEventDispatcher.Trigger("designengine.dropitem.onblur", null);
    }

    private void OnItemClick(ComponentSchema componentSchema)
    {
        //取消上一个选中，设置当前选中项
        if (DragDropStateService.LastSelectedComponent != null)
            DragDropStateService.LastSelectedComponent.IsSelected = false;

        componentSchema.IsSelected = true;
        DragDropStateService.LastSelectedComponent = componentSchema;

        StateHasChanged();
    }

    private void OnItemDelete(ComponentSchema componentSchema)
    {
        //将下一个设为选中
        int index = _DropItemContainerSchema.ComponentSchemas.IndexOf(componentSchema);
        if (_DropItemContainerSchema.ComponentSchemas.Count > 1)
        {
            int next = index + 1 >= _DropItemContainerSchema.ComponentSchemas.Count ? index - 1 : index + 1;
            _DropItemContainerSchema.ComponentSchemas[next].IsSelected = true;
            DragDropStateService.LastSelectedComponent = _DropItemContainerSchema.ComponentSchemas[next];
        }
        _DropItemContainerSchema.ComponentSchemas.Remove(componentSchema);
        StateHasChanged();
    }

    private void OnItemCopy(ComponentSchema componentSchema)
    {
        componentSchema.IsSelected = false;
        DragDropStateService.DragItem_Add(_DropItemContainerSchema.ComponentSchemas, componentSchema, true);
        StateHasChanged();
    }
    #endregion

    #region private
    /// <summary>
    /// 排序
    /// </summary>
    /// <param name="dragOverComponent"></param>
    /// <param name="currentDragComponent"></param>
    private void DropItemSorting(ComponentSchema dragOverComponent, ComponentSchema currentDragComponent)
    {
        if (dragOverComponent == null)
            return;

        if (currentDragComponent == DragDropStateService.LastDragOverComponent)
            return;

        var indexDraggedOverItem = _DropItemContainerSchema.ComponentSchemas.IndexOf(dragOverComponent);
        if (dragOverComponent.IsDroppedToBack == false)
            indexDraggedOverItem -= 1;

        if (indexDraggedOverItem < 0)
            indexDraggedOverItem = 0;
        if (indexDraggedOverItem > _DropItemContainerSchema.ComponentSchemas.Count)
            indexDraggedOverItem = _DropItemContainerSchema.ComponentSchemas.Count - 1;

        //先移除，再插入对应位置
        _DropItemContainerSchema.ComponentSchemas.Remove(currentDragComponent);
        _DropItemContainerSchema.ComponentSchemas.Insert(indexDraggedOverItem, currentDragComponent);
    }

    public void Dispose()
    {
        DragDropStateService.Reset();
    }
    #endregion
}