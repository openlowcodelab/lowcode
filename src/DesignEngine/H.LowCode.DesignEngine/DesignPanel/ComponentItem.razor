@namespace H.LowCode.DesignEngine
@inherits LowCodeComponentBase

@if (Component != null && _renderFragment != null)
{
    @if (Component.IsHiddenLabel == false && Component.IsContainer == false)
    {
        <div class="designengine-componentitem-title">@Component.Label：</div>
    }

    @if (Component.IsContainer)
    {
        <div class="designengine-componentitem-div-container">@_renderFragment</div>
    }
    else
    {
        <div class="designengine-componentitem-div-component">
            @_renderFragment
            @if (!string.IsNullOrEmpty(Component.Description))
            {
                <div style="color:#c7c7c7">@Component.Description</div>
            }
        </div>
    }
}

@code {
    [Parameter]
    public ComponentPartsSchema Component { get; set; }

    private RenderFragment _renderFragment;

    protected override async Task OnInitializedAsync()
    {
        Init();

        await base.OnInitializedAsync();
    }

    private void Init()
    {
        if (Component == null)
            throw new NullReferenceException(nameof(Component));

        if (string.IsNullOrEmpty(Component.Name))
            Component.Name = $"{Component.ComponentName}_{Random.Shared.Next(100, 999)}";

        _renderFragment = RenderComponent();
    }
 
    private RenderFragment RenderComponent() => builder =>
    {
        int index = 0;
        Type type = Type.GetType(Component.Fragment.FullTypeName);
        builder.OpenComponent(index++, type);
        //Parameters
        foreach (var attr in Component.Fragment.Parameters)
        {
            if (attr.ValueType == ComponentValueTypeEnum.Integer)
                builder.AddComponentParameter(index++, attr.Name, attr.IntValue);
            else if (attr.ValueType == ComponentValueTypeEnum.String)
            {
                if ("{self}".Equals(attr.StringValue, StringComparison.OrdinalIgnoreCase))
                    builder.AddAttribute(index++, attr.Name, Component);
                else
                    builder.AddComponentParameter(index++, attr.Name, attr.StringValue);
            }
            else
            {
                throw new NotSupportedException($"{attr.ValueType}");
            }
        }
        builder.CloseComponent();
    };
}