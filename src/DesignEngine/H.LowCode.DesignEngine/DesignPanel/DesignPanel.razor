@namespace H.LowCode.DesignEngine
@using System.Reflection
@inherits LowCodeComponentBase

@inject DragDropStateService DragDropStateService
@inject IComponentPartsAppService ComponentPartsAppService
@inject ComponentState<DesignPanel, ComponentPartsSchema> RootComponentState

@if (_rootComponent != null)
{
    <div class="designpanel" style="margin:5px; height:100%; overflow-y: auto;">
        <DropItemContainer ContainerComponent="@_rootComponent" IsRootContainer="true"></DropItemContainer>
    </div>
}

@code {
    [CascadingParameter(Name = "pageCascading")]
    public PageCascadingModel PageCascading { get; set; }

    [SupplyParameterFromQuery(Name = "pt")]
    public int PageType { get; set; }

    private ComponentPartsSchema _rootComponent;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _rootComponent = RootComponentState.GetOrAdd(this, () =>
        {
            return LoadRootComponent();
        });
        //考虑预呈现场景,重新保存 rootComponent
        DragDropStateService.SetRootComponent(PageCascading.AppId, PageCascading.PageId, _rootComponent);
    }

    private ComponentPartsSchema LoadRootComponent()
    {
        var rootComponent = DragDropStateService.GetRootComponent(PageCascading.AppId, PageCascading.PageId);
        if (rootComponent == null)
        {
            rootComponent = new ComponentPartsSchema();
            rootComponent.Name = "root";
            rootComponent.Refresh = StateHasChanged;
        }
        return rootComponent;
    }

    public async Task ReloadAsync(PageSchema pageSchema)
    {
        var rootComponent = DragDropStateService.GetRootComponent(PageCascading.AppId, PageCascading.PageId);
        if (pageSchema != null && rootComponent != null)
        {
            var componentPartses = new List<ComponentPartsSchema>();
            foreach (var component in pageSchema.Components)
            {
                //组件实例 Schema
                var json = component.ToJson();
                var componentPartsInstance = json.FromJson<ComponentPartsSchema>();

                //组件定义 Schema
                var componentPartsDefine = await ComponentPartsAppService.GetByIdAsync(component.LibraryId, component.ComponentId);

                ObjectMerger.Merge<ComponentPartsSchema>(componentPartsInstance, componentPartsDefine);
                componentPartses.Add(componentPartsDefine);
            }
            rootComponent.Childrens = componentPartses;
        }
        StateHasChanged();
    }

    /// <summary>
    /// 用于 RootComponentState 的 key（每个页面独立缓存）
    /// </summary>
    /// <returns></returns>
    public override string ToString()
    {
        return $"{base.ToString()}-{PageCascading.AppId}-{PageCascading.PageId}";
    }
}
