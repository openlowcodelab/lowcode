@namespace H.LowCode.DesignEngine
@inherits LowCodeComponentBase

@inject DragDropStateService DragDropStateService
@inject ComponentState<DesignPanel, ComponentSchema> RootComponentState

@if (_rootComponent != null)
{
    <div class="designpanel" style="margin:5px; height:100%; overflow-y: auto;">
        <DropItemContainer ContainerComponent="@_rootComponent" IsRootContainer="true"></DropItemContainer>
    </div>
}

@code {
    [CascadingParameter(Name = "pageCascading")]
    public PageCascadingModel PageCascading { get; set; }

    [SupplyParameterFromQuery(Name = "pt")]
    public int PageType { get; set; }

    private ComponentSchema _rootComponent;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _rootComponent = RootComponentState.GetOrAdd(this, () =>
        {
            return LoadRootComponent();
        });
        //考虑预呈现场景,重新保存 rootComponent
        DragDropStateService.SetRootComponent(PageCascading.AppId, PageCascading.PageId, _rootComponent);
    }

    private ComponentSchema LoadRootComponent()
    {
        var rootComponent = DragDropStateService.GetRootComponent(PageCascading.AppId, PageCascading.PageId);
        if (rootComponent == null)
        {
            rootComponent = new ComponentSchema("root");
            rootComponent.Refresh = StateHasChanged;
        }
        return rootComponent;
    }

    public void Reload(PageSchema pageSchema)
    {
        if (pageSchema != null && DragDropStateService.GetRootComponent(PageCascading.AppId, PageCascading.PageId) != null)
            DragDropStateService.GetRootComponent(PageCascading.AppId, PageCascading.PageId).Childrens = pageSchema.Components;
        StateHasChanged();
    }

    public override string ToString()
    {
        return $"{base.ToString()}-{PageCascading.AppId}-{PageCascading.PageId}";
    }
}
