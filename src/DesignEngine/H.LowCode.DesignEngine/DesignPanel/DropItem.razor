@inject DragDropStateService DragDropStateService

<div class="dropitem-box @DropItemBoxClassMapper.Class" style="float:left; opacity:@Component.Opacity;
    width: @(Component.ComponentStyle.ItemWidth/24*100)%; min-height: @(Component.ComponentStyle.ItemHeight)px;
     @Style  position:@Component.ComponentStyle.Position;
     @Component.ComponentStyle.DefaultStyle @Component.ComponentStyle.CustomStyle"
     @onclick="OnClick" @onclick:stopPropagation
     @ondragstart="OnDragStart" @ondragstart:stopPropagation
     @ondragenter="OnDragEnter" @ondragenter:stopPropagation
     @ondragover="OnDragOver" @ondragover:preventDefault @ondragover:stopPropagation
     @ondragleave="OnDragLeave" @ondragleave:stopPropagation
     @onmouseover="OnMouseOver" @onmouseover:stopPropagation
     @onmouseout="OnMouseOut" @onmouseout:stopPropagation>

    <div class="dropitem @DropItemClassMapper.Class" style="@Component.DragEffectStyle">
        @if (Component.IsSelected)
        {
            <div draggable="true" class="dropitem-icon-move">
                <Icon Type="drag" Theme="outline" />
            </div>
            <div class="dropitem-pointer-wrapper">
                <div class="dropitem-pointer" @onclick="OnDelete">
                    <Icon Type="delete" Theme="outline" />
                </div>
                <div class="dropitem-pointer" @onclick="OnCopy">
                    <Icon Type="copy" Theme="outline" />
                </div>
            </div>
        }

        @if (Component.IsHiddenTitle == false && Component.IsContainerComponent == false)
        {
            <div class="dropitem-title">@Component.ComponentProperty.Title ：</div>
        }

        @if (Component.IsContainerComponent)
        {
            <div class="dropitem-div-container">@_renderFragment</div>
        }
        else
        {
            <div class="dropitem-div-component">@_renderFragment</div>
        }
    </div>
</div>

@code {
    [CascadingParameter(Name = "appId")]
    public string AppId { get; set; }

    [CascadingParameter(Name = "pageId")]
    public string PageId { get; set; }

    [Parameter]
    public ComponentSchema Component { get; set; }

    [Parameter]
    public Action<ComponentSchema> OnItemClick { get; set; }

    [Parameter]
    public Action<ComponentSchema> OnItemDelete { get; set; }

    [Parameter]
    public Action<ComponentSchema> OnItemCopy { get; set; }

    [Parameter]
    public string Style { get; set; }

    protected ClassMapper DropItemBoxClassMapper { get; } = new ClassMapper();
    protected ClassMapper DropItemClassMapper { get; } = new ClassMapper();

    private RenderFragment _renderFragment;

    #region Init
    protected override void OnInitialized()
    {
        Init();
        SetClassMap();

        base.OnInitialized();
    }

    private void Init()
    {
        if (Component == null)
            throw new NullReferenceException(nameof(Component));

        Component.ComponentProperty.Name = $"{Component.ComponentName}_{Random.Shared.Next(100, 999)}";

        _renderFragment = RenderComponent();
    }

    private void SetClassMap()
    {
        DropItemClassMapper.Clear()
            .If("dropitem-selected", () => Component.IsSelected)
            .If("dropitem-component", () => Component.IsContainerComponent == false)
            .If("dropitem-container", () => Component.IsContainerComponent);

        DropItemBoxClassMapper.Clear()
            .If("dropitem-box-layout", () => Component.IsContainerComponent);
    }

    private RenderFragment RenderComponent() => builder =>
    {
        foreach (var fragment in Component.ComponentFragments)
        {
            if (fragment.FragmentEnum == FragmentEnum.Component)
            {
                Type type = Type.GetType(fragment.ComponentFragmentName);
                builder.OpenComponent(fragment.Index, type);
            }
            else if (fragment.FragmentEnum == FragmentEnum.Attribute)
            {
                if (fragment.ValueType == ComponentValueType.Integer)
                {
                    builder.AddAttribute(fragment.Index, fragment.Name, fragment.IntValue);
                }
                else if (fragment.ValueType == ComponentValueType.String)
                {
                    if ("{self}".Equals(fragment.StringValue, StringComparison.OrdinalIgnoreCase))
                        builder.AddAttribute(fragment.Index, fragment.Name, Component);
                    else
                        builder.AddAttribute(fragment.Index, fragment.Name, fragment.StringValue);
                }
            }
            else if (fragment.FragmentEnum == FragmentEnum.Parameter)
            {
                if (fragment.ValueType == ComponentValueType.Integer)
                    builder.AddComponentParameter(fragment.Index, fragment.Name, fragment.IntValue);
                else if (fragment.ValueType == ComponentValueType.String)
                {
                    if ("{self}".Equals(fragment.StringValue, StringComparison.OrdinalIgnoreCase))
                        builder.AddAttribute(fragment.Index, fragment.Name, Component);
                    else
                        builder.AddComponentParameter(fragment.Index, fragment.Name, fragment.StringValue);
                }
            }
        }
        builder.CloseComponent();
    };
    #endregion

    #region Event
    private void OnClick()
    {
        Component.DragEffectStyle = string.Empty;
        //DragDropStateService.ResetDragStyle();

        OnItemClick.Invoke(Component);
        BlazorEventDispatcher.Trigger("designengine.dropitem.onclick", Component);
    }

    private void OnDragStart(DragEventArgs dragEventArgs)
    {
        Component.Opacity = 0.2;

        //记录当前选中对象
        DragDropStateService.SetCurrentDragComponent(AppId, PageId, Component);
    }
    
    private void OnDragEnter(DragEventArgs dragEventArgs)
    {
        DragDropStateService.SetLastDragOverComponent(AppId, PageId, Component);
    }

    private void OnDragOver(DragEventArgs dragEventArgs)
    {
        if (ReferenceEquals(DragDropStateService.GetCurrentDragComponent(AppId, PageId), Component))
            return;

        if (DateTime.Now < DragDropStateService.GetLastDragOverTime(AppId, PageId).AddMilliseconds(100))
            return;

        //设置移动位置样式，拖拽到目标元素上半部分时，上方添加虚线边框，下半部分时下方添加虚线边框
        if (dragEventArgs.OffsetY < 30)
        {
            Component.DragEffectStyle = "border-top: 2px dashed #1890ff;";
            Component.IsDropedAfter = false;
        }
        else
        {
            Console.WriteLine($"OnDragOver: bottom");
            Component.DragEffectStyle = "border-bottom: 2px dashed #1890ff; height: auto;";
            Component.IsDropedAfter = true;
        }
        DragDropStateService.SetLastDragOverTime(AppId, PageId, DateTime.Now);
    }

    private void OnDragLeave()
    {
        //如果当前被拖拽的组件和拖拽到上面的组件是同一个，直接返回
        if (ReferenceEquals(DragDropStateService.GetCurrentDragComponent(AppId, PageId), Component))
            return;

        Console.WriteLine("OnDragLeave");
        Component.DragEffectStyle = string.Empty;
    }

    private void OnMouseOver()
    {
        if (Component.IsSelected == false)
        {
            Component.DragEffectStyle = "outline: #1890ff dashed 1.5px;";
        }
    }

    private void OnMouseOut()
    {
        if (Component.IsSelected == false)
        {
            Component.DragEffectStyle = string.Empty;
        }
    }

    private void OnDelete()
    {
        OnItemDelete.Invoke(Component);
    }

    private void OnCopy()
    {
        OnItemCopy.Invoke(Component);
    }
    #endregion
}