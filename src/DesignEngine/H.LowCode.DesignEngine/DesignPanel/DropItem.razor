@inject DragDropStateService DragDropStateService

<div class="dropitem-box" style="@Style; float:left; opacity:@ComponentSchema.Opacity; width: @(_itemWidth)%; @(_itemHeight) min-height: @(_itemMinHeight)px;
    @ComponentSchema.ComponentPropertySchema.CustomStyle">
    <div class="dropitem @DropItemClassMapper.Class" style="@ComponentSchema.ComponentPropertySchema.Style"
         @onclick="OnClick" @onclick:stopPropagation 
         @ondragstart="OnDragStart"
         @ondragenter="OnDragEnter"
         @ondragover="OnDragOver" @ondragover:stopPropagation @ondragover:preventDefault
         @ondragleave="OnDragLeave">

        @if (ComponentSchema.IsSelected)
        {
            <div draggable="true" class="dropitem-icon-move">
                <Icon Type="drag" Theme="outline" />
            </div>
            <div class="dropitem-pointer-wrapper">
                <div class="dropitem-pointer" @onclick="OnDelete">
                    <Icon Type="delete" Theme="outline" />
                </div>
                <div class="dropitem-pointer" @onclick="OnCopy">
                    <Icon Type="copy" Theme="outline" />
                </div>
            </div>
        }
        @if (ComponentSchema.IsHiddenTitle == false)
        {
            <div class="dropitem-title">@ComponentSchema.ComponentPropertySchema.Title ：</div>
        }
        <div class="dropitem-div">@ComponentSchema.RenderFragment(ComponentSchema)</div>
    </div>
</div>

@code {
    [Parameter]
    public ComponentSchema ComponentSchema { get; set; }

    [Parameter]
    public Action<ComponentSchema> OnItemClick { get; set; }

    [Parameter]
    public Action<ComponentSchema> OnItemDelete { get; set; }

    [Parameter]
    public Action<ComponentSchema> OnItemCopy { get; set; }

    [Parameter]
    public DropItemType DropItemType { get; set; }

    [Parameter]
    public string Style { get; set; }

    protected ClassMapper DropItemClassMapper { get; } = new ClassMapper();

    private double _itemWidth;
    private string _itemHeight;
    private double _itemMinHeight;

    protected override void OnInitialized()
    {
        RegisterEventDispatcher();
        SetClassMap();
        InitData();

        base.OnInitialized();
    }

    private void SetClassMap()
    {
        DropItemClassMapper.Clear()
            .If("dropitem-selected", () => ComponentSchema.IsSelected);
    }

    private void InitData()
    {
        ComponentSchema.ComponentPropertySchema.Name = $"{ComponentSchema.ComponentType}_{Random.Shared.Next(100, 999)}";

        _itemWidth = (ComponentSchema.ComponentPropertySchema.ItemWidth.HasValue == false ? 12 : ComponentSchema.ComponentPropertySchema.ItemWidth.Value) / 24 * 100;
        if (DropItemType == DropItemType.Component)
        {
            _itemMinHeight = ComponentSchema.ComponentPropertySchema.ItemHeight.HasValue == false ? 85 : ComponentSchema.ComponentPropertySchema.ItemHeight.Value;
        }
        else
        {
            _itemHeight = "height: auto;";
        }
    }

    private void OnClick()
    {
        OnItemClick.Invoke(ComponentSchema);
        BlazorEventDispatcher.Trigger("designengine.dropitem.onclick", ComponentSchema);
    }

    private void OnDragStart(DragEventArgs dragEventArgs)
    {
        DragDropStateService.DragItem_Effect_Move(dragEventArgs);
        ComponentSchema.Opacity = 0.2;

        //记录当前选中对象
        DragDropStateService.CurrentDragComponent = ComponentSchema;
    }

    private void OnDragEnter()
    {
        DragDropStateService.LastDragOverComponent = ComponentSchema;
    }

    private void OnDragOver(DragEventArgs dragEventArgs)
    {
        //设置移动位置样式，拖拽到目标元素上半部分时，上方添加红色边框，下半部分时下方添加红色边框
        if (dragEventArgs.OffsetY < 30)
        {
            Console.WriteLine($"top: OffsetY:{dragEventArgs.OffsetY}");
            ComponentSchema.ComponentPropertySchema.Style = "border-top: 2px dashed #1890ff;";
            ComponentSchema.IsDroppedToBack = false;
        }
        else
        {
            Console.WriteLine($"bottom: OffsetY:{dragEventArgs.OffsetY}");
            ComponentSchema.ComponentPropertySchema.Style = "border-bottom: 2px dashed #1890ff; height: auto;";
            ComponentSchema.IsDroppedToBack = true;
        }
    }

    private void OnDragLeave()
    {
        //如果当前被拖拽的组件和拖拽到上面的组件是同一个，直接返回
        if (DragDropStateService.CurrentDragComponent == ComponentSchema)
            return;

        ComponentSchema.ComponentPropertySchema.Style = string.Empty;
    }

    private void OnDelete()
    {
        OnItemDelete.Invoke(ComponentSchema);
    }

    private void OnCopy()
    {
        OnItemCopy.Invoke(ComponentSchema);
    }

    private void RegisterEventDispatcher()
    {
        //订阅设计面板中的组件点击事件
        BlazorEventDispatcher.RegisterEvent("designengine.dropitem.onclick", (value) =>
        {
            //取消选中项
            if (DragDropStateService.LastSelectedComponent != ComponentSchema)
            {
                ComponentSchema.IsSelected = false;
                StateHasChanged();
            }
        });

        //订阅属性面板中的事件
        BlazorEventDispatcher.RegisterEvent("designengine.propertysetting.onchange", (value) =>
        {
            StateHasChanged();
        });
    }
}