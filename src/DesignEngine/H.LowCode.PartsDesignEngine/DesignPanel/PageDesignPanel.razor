@namespace H.LowCode.PartsDesignEngine
@inherits LowCodeComponentBase

@inject DragDropStateService DragDropStateService

@if (_rootComponent != null)
{
    <div class="designpanel" style="margin:5px; height:100%; overflow-y: auto;">
        <DropItemContainer ContainerComponent="@_rootComponent" IsRootContainer="true"></DropItemContainer>
    </div>
}

@code {
    [CascadingParameter(Name = "pageCascading")]
    public PageCascadingModel PageCascading { get; set; }

    [SupplyParameterFromQuery(Name = "pt")]
    public int PageType { get; set; }

    private ComponentPartsSchema _rootComponent;

    protected override async Task OnInitializedAsync()
    {
        _rootComponent = LoadRootComponent();

        await base.OnInitializedAsync();
    }

    private ComponentPartsSchema LoadRootComponent()
    {
        var rootComponent = DragDropStateService.GetRootComponent(PageCascading.AppId, PageCascading.PageId);
        if (rootComponent == null)
        {
            rootComponent = new ComponentPartsSchema();
            //rootComponent.Refresh = StateHasChanged;
            DragDropStateService.SetRootComponent(PageCascading.AppId, PageCascading.PageId, rootComponent);
        }
        return rootComponent;
    }

    public void Reload(PageSchema pageSchema)
    {
        var rootComponent = DragDropStateService.GetRootComponent(PageCascading.AppId, PageCascading.PageId);
        if (pageSchema != null && rootComponent != null)
        {
            var componentPartses = new List<ComponentPartsSchema>();
            foreach (var component in pageSchema.Components)
            {
                string json = component.ToJson();
                var componentParts = json.FromJson<ComponentPartsSchema>();
                componentPartses.Add(componentParts);
            }
            rootComponent.Childrens = componentPartses;
        }
        StateHasChanged();
    }
}
