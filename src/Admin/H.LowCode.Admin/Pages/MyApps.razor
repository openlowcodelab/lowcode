@page "/admin/myapps"

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<div style="width:80%; overflow: hidden; margin:auto; padding: 10px;">
    <div style="display: flex; justify-content: space-between; margin: 0 0 8px 5px;">
        <div style="text-align: left; width:250px;">
            <Search Placeholder="应用名称" OnSearch="()=>{}" />
        </div>
        <div style="text-align: right; width:80px; line-height:32px; margin-right:10px;">
            <Button Type="@ButtonType.Primary" OnClick="@(()=>{ _visible = true; })">创建应用</Button>
        </div>
    </div>

    @if(_appSchemas != null){
        @foreach (var app in _appSchemas)
        {
            <Card Class="myapps" Style="float:left; width:300px; margin:5px;" Bordered>
                <ChildContent>
                    <CardMeta AvatarTemplate="@avatarTemplate" Title="@app.Name" Description="@app.Description" />
                </ChildContent>
                <ActionTemplate>
                    <CardAction>
                        <a href="@($"/myapp/pagemanager/{app.Id}")" title="开发" target="_blank"><Icon Type="desktop" /></a>
                    </CardAction>
                    <CardAction>
                        <a href="@($"{app.Id}/index")" title="访问" target="_blank"><Icon Type="global" /></a>
                    </CardAction>
                    <CardAction>
                        <a href="javascript:void(0);"><Icon Type="question-circle" /></a>
                    </CardAction>
                    <CardAction>
                        <a href="@($"/myapp/appsettings/{app.Id}")" title="设置" target="_blank"><Icon Type="setting" /></a>
                    </CardAction>
                </ActionTemplate>
            </Card>
        }
    }
</div>

<Modal Title="创建应用" @bind-Visible="@_visible" Width="1100" Footer="null">
    <AppCreate CreateAppAction="ReloadApps"></AppCreate>
</Modal>

@code {
    private IList<AppSchema> _appSchemas = [];
    private bool _visible = false;

    RenderFragment avatarTemplate = @<Avatar Icon="appstore"></Avatar>;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        LoadApps();
    }

    private async void LoadApps()
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        _appSchemas = await httpClient.GetFromJsonAsync<IList<AppSchema>>($"api/designengine/getapps");
        StateHasChanged();
    }

    private void ReloadApps()
    {
        _visible = false;
        LoadApps();
        StateHasChanged();
    }
}