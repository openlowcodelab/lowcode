@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel
@using System.Reflection

@namespace H.LowCode.Themes.AntBlazor

<Form Model="@model"
OnFinish="OnFinish"
OnFinishFailed="OnFinishFailed"
LabelColSpan="8"
WrapperColSpan="16">

    @* @foreach (var field in model)
    {
        <FormItem Name="@field.Key">
            <Input TValue="string" />
        </FormItem>
    } *@

    <FormItem Name="Field1">
        <Input TValue="string"></Input>
    </FormItem>
    @* <FormItem Name="Field2"> *@
    @*     <InputNumber TValue=""></InputNumber> *@
    @* </FormItem> *@
    <FormItem Name="Field3">
        <Input TValue="string"></Input>
    </FormItem>
    <FormItem Name="Field4">
        <Checkbox></Checkbox>
    </FormItem>
    <FormItem Name="Field5">
        <Switch></Switch>
    </FormItem>
    <FormItem Name="Field6">
        <RadioGroup TValue="string">
            <Radio Value="@("op1")">选项1</Radio>
            <Radio Value="@("op2")">选项2</Radio>
        </RadioGroup>
    </FormItem>
    <FormItem Name="Field7">
        <Input TValue="string"></Input>
    </FormItem>
    <FormItem Name="Field8">
        @* <CheckboxGroup TValue="string"> *@
        @*     <Checkbox Label="ck1">选项11</Checkbox> *@
        @*     <Checkbox Label="字段8">选项22</Checkbox> *@
        @* </CheckboxGroup> *@
        @_renderFragment
    </FormItem>

    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="ButtonType.Primary" HtmlType="submit">
            Submit
        </Button>
    </FormItem>
</Form>

@code
{
    private Dictionary<string, object> model = new() {
        ["Field1"] = "字段1",
        ["Field2"] = 2,  //inputnumber
        ["Field3"] = "字段3",
        ["Field4"] = true,  //checkbox
        ["Field5"] = true,  //switch
        ["Field6"] = "字段6",  //radio
        ["Field7"] = "字段7",
        ["Field8"] = new string[] { "字段8" }
    };

    protected override void OnInitialized()
    {
        _renderFragment = RenderFragmentTest();
        base.OnInitialized();
    }

    private void AddField()
    {
        model.Add("Field" + model.Count + 1, "");
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{model.ToJson()}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{model.ToJson()}");
    }

    private RenderFragment _renderFragment;
    private RenderFragment RenderFragmentTest()
    {
        return builder =>
        {
            builder.OpenComponent<CheckboxGroup<string>>(0);
            //builder.AddAttribute(1, "TValue", typeof(string));
            builder.AddAttribute(2, "ChildContent", (RenderFragment)((childBuilder) =>
            {
                childBuilder.OpenComponent<Checkbox>(3);
                childBuilder.AddAttribute(4, "Label", "op1");
                childBuilder.AddAttribute(5, "ChildContent", (RenderFragment)((cb) =>
                {
                    cb.AddContent(6, "ck1");
                }));
                childBuilder.CloseComponent();

                childBuilder.OpenComponent<Checkbox>(6);
                childBuilder.AddAttribute(7, "Label", "op2");
                childBuilder.AddAttribute(8, "ChildContent", (RenderFragment)((cb) =>
                {
                    cb.AddContent(9, "字段8");
                }));
                childBuilder.CloseComponent();
            }));
            builder.CloseComponent();
        };
    }
}