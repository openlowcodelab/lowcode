@inherits LayoutComponentBase
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ComponentStateWrapper<AntBlazorThemeLayout, MenuDataItem[]> State
@inject ComponentStateWrapper<string, string> State2

<PageTitle>@State2.Value</PageTitle>

<AntDesign.ProLayout.BasicLayout Logo="@("logo.png")" Title="@State2.Value" MenuData="@State.Value"
    Layout="AntDesign.ProLayout.Layout.Side">
    <RightContentRender>
        @*<AntDesign.Pro.Template.Components.RightContent />*@
        RightContent
    </RightContentRender>
    <ChildContent>
        @Body
    </ChildContent>
    <FooterRender></FooterRender>
</AntDesign.ProLayout.BasicLayout>

@code
{
    // public string AppId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (State.Value is null)
        {
            string appid = GetAppId();
            State2.Value = appid;
            State.Value = await InitMenuDataAsync(appid);

            await base.OnInitializedAsync();
        }
    }

    private string GetAppId()
    {
        string appid = string.Empty;
        if ((this.Body.Target as RouteView)?.RouteData.RouteValues?.TryGetValue("AppId", out object appId) == true)
        {
            appid = appId?.ToString();
        }

        if (string.IsNullOrEmpty(appid))
            throw new NullReferenceException(nameof(appid));

        return appid;
    }

    private async Task<MenuDataItem[]> InitMenuDataAsync(string appId)
    {
        var menuList = await GetMenuListAsync(appId);
        MenuDataItem[] menuArr = ConvertMenus(appId, menuList);

        var menus = menuArr.ToList();
        menus.AddFirst(new MenuDataItem
            {
                Path = $"/{appId}/index",
                Name = "首页",
                Key = "home"
            });
        return menus.ToArray();
    }

    private async Task<IList<MenuSchema>> GetMenuListAsync(string appId)
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        var result = await httpClient.GetFromJsonAsync<List<MenuSchema>>($"api/renderengine/getmenus?appId={appId}");
        return result;
    }

    private MenuDataItem[] ConvertMenus(string appId, IList<MenuSchema> menuList)
    {
        var menus = new List<MenuDataItem>();
        foreach (var menu in menuList)
        {
            var m = new MenuDataItem()
                {
                    Path = $"/{appId}/{menu.MenuUrl}",
                    Name = menu.Title,
                    Key = menu.Id
                };
            if (menu.Childrens.Count > 0)
                m.Children = ConvertMenus(appId, menu.Childrens);
            menus.Add(m);
        }
        return menus.ToArray();
    }
}