@page "/{AppId}/{PageId}"
@namespace H.LowCode.ThemeParts.AntBlazor
@layout AntBlazorThemeLayout

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ComponentStateWrapper<MetaPage, PageSchema> State

<CascadingValue Value="AppId" Name="appId">
    <CascadingValue Value="PageId" Name="pageId">
        @if (_pageSchema != null)
        {
            foreach (var component in _pageSchema.Components)
            {
                if (component.IsContainerComponent)
                {
                    <ContainerComponentRender ContainerComponent="@component"></ContainerComponentRender>
                }
                else
                {
                    <ComponentRender Component="@component"></ComponentRender>
                }
            }
        }
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter]
    public string AppId { get; set; }

    [Parameter]
    public string PageId { get; set; }

    private PageSchema _pageSchema;

    protected override async Task OnParametersSetAsync()
    {
        _pageSchema = await LoadPageSchemaAsync();
        
        await base.OnParametersSetAsync();
    }

    private async Task<PageSchema> LoadPageSchemaAsync()
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        var pageSchema = await httpClient.GetFromJsonAsync<PageSchema>($"api/renderengine/getpage?appId={AppId}&pageId={PageId}");
        return pageSchema;
    }
}
