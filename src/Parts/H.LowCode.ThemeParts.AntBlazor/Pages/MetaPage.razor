@page "/{AppId}/{PageId}"
@namespace H.LowCode.ThemeParts.AntBlazor
@inherits LowCodePageComponentBase
@layout AntBlazorThemeLayout

@inject IHttpClientFactory HttpClientFactory
@inject ComponentStateWrapper<MetaPage, PageSchema> State

<PageTitle>@($"{_pageCascadingModel.PageName}")</PageTitle>

<CascadingValue Value="@_pageCascadingModel" Name="pageCascading">
    @if (_pageSchema != null)
    {
        if(_pageSchema.PageType == PageTypeEnum.Normal)
        {
            <NormalPageRender Page="@_pageSchema"></NormalPageRender>
        }
        else if(_pageSchema.PageType == PageTypeEnum.Form)
        {
            <FormPageRender Page="@_pageSchema"></FormPageRender>
        }
        else if (_pageSchema.PageType == PageTypeEnum.Table)
        {
            <TablePageRender Page="@_pageSchema"></TablePageRender>
        }
        else
        {
            throw new NotImplementedException($"PageType: {_pageSchema.PageType}");
        }
    }
</CascadingValue>

@code {
    [Parameter]
    public string AppId { get; set; }

    [Parameter]
    public string PageId { get; set; }

    private PageSchema _pageSchema;
    private PageCascadingModel _pageCascadingModel;

    protected override async Task OnParametersSetAsync()
    {
        _pageCascadingModel = new() { AppId = AppId, PageId = PageId, PageName = "..." };

        _pageSchema = await LoadPageSchemaAsync();
        SetPageModel(_pageSchema);

        await base.OnParametersSetAsync();
    }

    private async Task<PageSchema> LoadPageSchemaAsync()
    {
        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = base.GetBaseUri();

        var pageSchema = await httpClient.GetFromJsonAsync<PageSchema>($"api/renderengine/getpage?appId={AppId}&pageId={PageId}");
        return pageSchema;
    }

    private void SetPageModel(PageSchema pageSchema)
    {
        _pageCascadingModel.PageName = pageSchema.Name;
        _pageCascadingModel.PageLayout = pageSchema.PageProperty.PageLayout;
    }
}
