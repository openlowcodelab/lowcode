@namespace H.LowCode.ThemeParts.AntBlazor
@inherits LowCodeComponentBase

@inject IFormDataAppService FormDataAppService

@if (formDTO != null)
{
    <Form Model="@formDTO.Fields" @ref="@_form"
    OnFinish="OnFinishAsync" OnFinishFailed="OnFinishFailed"
    LabelColSpan="8" WrapperColSpan="16">
        @foreach (var component in Page.Components)
        {
            <FormComponentRender Component="@component" IsInRootContainer="true"></FormComponentRender>
        }

        <FormItem WrapperColOffset="8" WrapperColSpan="16" Style="clear:both;">
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                保存
            </Button>
            <Button HtmlType="button" Style="margin: 0 8px">
                取消
            </Button>
        </FormItem>
    </Form>
}

@code {
    [Parameter]
    public PageSchema Page { get; set; }

    private Form<Dictionary<string, object>> _form;
    private string Id => GetQueryValue("id");
    private FormDataDTO formDTO;

    protected override async Task OnInitializedAsync()
    {
        formDTO = await FormDataAppService.GetAsync(Page.AppId, Page.Id, Id);
        formDTO = new FormDataDTO()
            {
                Fields = {
                    ["f_id"] = "123",
                    ["f_field1"] = "字段1",
                    ["f_field2"] = 2,
                    ["f_field3"] = "字段3",
                    ["f_field4"] = true,
                    ["f_field5"] = 5,
                    ["f_field6"] = "字段6",
                    ["f_field7"] = "字段7",
                    ["f_field8"] = "字段8",
                    ["f_field9"] = true,
                    ["f_field10"] = DateTime.Parse("2024/11/30 18:46:00"),
                    ["f_field11"] = "字段11",
                    ["f_field12"] = "字段12",
                    ["CreatedTime"] = DateTime.Parse("2024/11/30 18:46:00"),
                    ["CreatedUser"] = null,
                    ["ModifiedTime"] = DateTime.Parse("2024/11/30 18:46:00"),
                    ["ModifiedUser"] = null
                }
            };
    }

    private async Task OnFinishAsync()
    {
        await FormDataAppService.SaveAsync(formDTO);
    }

    private void OnFinishFailed(EditContext editContext)
    {

    }
}