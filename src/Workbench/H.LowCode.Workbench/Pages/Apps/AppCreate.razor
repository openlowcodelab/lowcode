@namespace H.LowCode.Workbench
@layout ProAdminLayout

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IMessageService _message

<div style="width:100%; height: 500px; margin:auto;">
    <h3>基础创建</h3>
    <Card Bordered="true" Style="width:300px; margin:5px;">
        <a href="javascript:void(0)" onclick="@(()=>{ _visible = true; })">创建空白应用</a>
    </Card>
    <br/>
    <h3>从模板创建</h3>
    <AppPopularTemplates></AppPopularTemplates>
</div>

<Modal Title="创建应用" @bind-Visible="@_visible" OnOk="OnConfirm">
    <Form Model="@_appSchema" LabelColSpan="8" WrapperColSpan="16" OnFinish="OnFinish" @ref="@_form"
          ValidateMode="@FormValidateMode.Rules" ValidateOnChange="true">
        <FormItem Label="应用标识" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <Input @bind-Value="@context.Id" />
        </FormItem>
        <FormItem Label="应用名称" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
            <Input @bind-Value="@context.Name" />
        </FormItem>
        <FormItem Label="应用描述">
            <TextArea @bind-Value="@context.Description" />
        </FormItem>
        <FormItem Label="支持平台">
            <EnumCheckboxGroup TEnum="SupportPlatformEnum" @bind-Value="@context.SupportPlatforms"></EnumCheckboxGroup>
        </FormItem>
    </Form>
</Modal>

@code {
    [Parameter]
    public Action CreateAppAction { get; set; }

    private bool _visible = false;
    private Form<AppSchema> _form;
    private AppSchema _appSchema = new AppSchema();

    private async Task OnConfirm(MouseEventArgs e)
    {
        var validate = _form.Validate();
        if (validate)
        {
            var result = await SaveAppSchema();
            if (result.StatusCode == HttpStatusCode.OK)
            {
                _visible = false;
                _form.Submit();
                NavigationManager.NavigateTo($"/workbench/myapps");
                await _message.Success("新建成功！");
                _form.Reset();
            }
            else
            {
                _visible = true;
                await _message.Error($"新建失败: {result.ReasonPhrase}");
            }
        }
        else
        {
            _visible = true;
        }
    }

    private void OnFinish()
    {
        if (CreateAppAction != null)
            CreateAppAction();
    }


    private async Task<HttpResponseMessage> SaveAppSchema()
    {
        string jsonSchema = _appSchema.ToJson();

        var content = new StringContent(jsonSchema, Encoding.UTF8, "application/json");

        var httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);
        var result = await httpClient.PostAsync($"api/designengine/saveapp", content);

        return result;
    }
}