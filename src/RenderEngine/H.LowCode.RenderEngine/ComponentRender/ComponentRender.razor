@namespace H.LowCode.RenderEngine

@if (Component.IsHiddenTitle == false && Component.IsContainerComponent == false)
{
    <div class="renderengine-componentitem-title">@Component.ComponentProperty.Title ：</div>
}

@if (Component.IsContainerComponent)
{
    <div class="renderengine-componentitem-div-container">@_renderFragment</div>
}
else
{
    <div class="renderengine-componentitem-div-component">@_renderFragment</div>
}

@code {
    [Parameter]
    public ComponentSchema Component { get; set; }

    private RenderFragment _renderFragment;

    protected override async Task OnInitializedAsync()
    {
        Init();

        await base.OnInitializedAsync();
    }

    private void Init()
    {
        if (Component == null)
            throw new NullReferenceException(nameof(Component));

        _renderFragment = RenderComponent();
    }

    private RenderFragment RenderComponent() => builder =>
    {
        foreach (var fragment in Component.ComponentFragments)
        {
            if (fragment.FragmentEnum == FragmentEnum.Component)
            {
                Type type = Type.GetType(fragment.ComponentFragmentName);
                builder.OpenComponent(fragment.Index, type);
            }
            else if (fragment.FragmentEnum == FragmentEnum.Attribute)
            {
                if (fragment.ValueType == ComponentValueType.Integer)
                {
                    builder.AddAttribute(fragment.Index, fragment.Name, fragment.IntValue);
                }
                else if (fragment.ValueType == ComponentValueType.String)
                {
                    if ("{self}".Equals(fragment.StringValue, StringComparison.OrdinalIgnoreCase))
                        builder.AddAttribute(fragment.Index, fragment.Name, Component);
                    else
                        builder.AddAttribute(fragment.Index, fragment.Name, fragment.StringValue);
                }
            }
            else if (fragment.FragmentEnum == FragmentEnum.Parameter)
            {
                if (fragment.ValueType == ComponentValueType.Integer)
                    builder.AddComponentParameter(fragment.Index, fragment.Name, fragment.IntValue);
                else if (fragment.ValueType == ComponentValueType.String)
                {
                    if ("{self}".Equals(fragment.StringValue, StringComparison.OrdinalIgnoreCase))
                        builder.AddAttribute(fragment.Index, fragment.Name, Component);
                    else
                        builder.AddComponentParameter(fragment.Index, fragment.Name, fragment.StringValue);
                }
            }
        }

        if (Component.ComponentFragments.Count > 0)
            builder.CloseComponent();
    };
}