@inject DragDropService DragDropService

<div class="dropitem-box" style="float:left; opacity:@ComponentSchema.Opacity; width: @(ComponentSchema.ComponentPropertySchema.ItemWidth/24*100)% 
        @ComponentSchema.ComponentPropertySchema.CustomStyle">
    <div class="dropitem @DropItemClassMapper.Class" style="@ComponentSchema.Style"
        @ondragstart="OnDragStart" 
        @ondragenter="OnDragEnter" 
        @ondragover:preventDefault @ondragover:stopPropagation @ondragover="(e)=>OnDragOver(e)" 
        @ondragleave="OnDragLeave" 
        @onclick="OnClick" @onclick:stopPropagation>
        @if (ComponentSchema.IsSelected)
        {
            <div draggable="true" class="dropitem-icon-move">
                <svg viewBox="64 64 896 896" focusable="false" data-icon="drag" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M909.3 506.3L781.7 405.6a7.23 7.23 0 00-11.7 5.7V476H548V254h64.8c6 0 9.4-7 5.7-11.7L517.7 114.7a7.14 7.14 0 00-11.3 0L405.6 242.3a7.23 7.23 0 005.7 11.7H476v222H254v-64.8c0-6-7-9.4-11.7-5.7L114.7 506.3a7.14 7.14 0 000 11.3l127.5 100.8c4.7 3.7 11.7.4 11.7-5.7V548h222v222h-64.8c-6 0-9.4 7-5.7 11.7l100.8 127.5c2.9 3.7 8.5 3.7 11.3 0l100.8-127.5c3.7-4.7.4-11.7-5.7-11.7H548V548h222v64.8c0 6 7 9.4 11.7 5.7l127.5-100.8a7.3 7.3 0 00.1-11.4z"></path></svg>
            </div>
            <div class="dropitem-pointer-wrapper">
                <div class="dropitem-pointer" @onclick="OnDelete">
                    <span role="img">
                        <svg viewBox="64 64 896 896" focusable="false" data-icon="delete" width="1em" height="1em" fill="currentColor" aria-hidden="true">
                            <path d="M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z"></path>
                        </svg>
                    </span>
                </div>
                <div class="dropitem-pointer" @onclick="OnCopy">
                    <span role="img">
                        <svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true">
                            <path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path>
                        </svg>
                    </span>
                </div>
            </div>
        }
        <div class="dropitem-title">@ComponentSchema.ComponentJsonSchema.Title ：</div>
        <div class="dropitem-div">@ComponentSchema.ComponentRenderFragment</div>
    </div>
</div>

@code
{
    [Parameter]
    public ComponentSchema ComponentSchema { get; set; }

    [Parameter]
    public Action<ComponentSchema> OnItemClick { get; set; }

    [Parameter]
    public Action<ComponentSchema> OnItemDelete { get; set; }

    [Parameter]
    public Action<ComponentSchema> OnItemCopy { get; set; }

    protected ClassMapper DropItemClassMapper { get; } = new ClassMapper();

    protected override void OnInitialized()
    {
        RegisterEventDispatcher();
        SetClassMap();
        InitData();

        base.OnInitialized();
    }

    private void SetClassMap()
    {
        DropItemClassMapper.Clear()
            .If("dropitem-selected", () => ComponentSchema.IsSelected);
    }

    private void InitData()
    {
        ComponentSchema.Name = $"{ComponentSchema.ComponentType}_{Random.Shared.Next(100, 999)}";
        ComponentSchema.ComponentJsonSchema.Title = $"{ComponentSchema.ComponentJsonSchema.Title}{Random.Shared.Next(10, 99)}";
    }

    private void OnClick()
    {
        OnItemClick.Invoke(ComponentSchema);
        BlazorEventDispatcher.Dispatch("designerengine.dropitem.onclick", ComponentSchema);
    }

    private void OnDragStart()
    {
        ComponentSchema.Opacity = 0.2;
        DragDropService.CurrentDragComponent = ComponentSchema;
    }

    private void OnDragEnter()
    {
        DragDropService.LastDragOverComponent = ComponentSchema;
    }

    private void OnDragOver(DragEventArgs dragEventArgs)
    {
        //设置移动位置样式，拖拽到目标元素上半部分时，上方添加红色边框，下半部分时下方添加红色边框
        if (dragEventArgs.OffsetY < 30)
        {
            ComponentSchema.Style = "border-top: 2px dashed #1890ff;";
            ComponentSchema.IsDroppedToBack = false;
        }
        else
        {
            ComponentSchema.Style = "border-bottom: 2px dashed #1890ff;";
            ComponentSchema.IsDroppedToBack = true;
        }
    }

    private void OnDragLeave()
    {
        //如果当前被拖拽的组件和拖拽到上面的组件是同一个，直接返回
        if (DragDropService.CurrentDragComponent == ComponentSchema)
            return;

        ComponentSchema.Style = string.Empty;
    }

    private void OnDelete()
    {
        OnItemDelete.Invoke(ComponentSchema);
    }

    private void OnCopy()
    {
        OnItemCopy.Invoke(ComponentSchema);
    }

    private void RegisterEventDispatcher()
    {
        //订阅属性面板中的事件
        BlazorEventDispatcher.RegisterEvent("designerengine.componentproperty.onchange", (value) =>
        {
            StateHasChanged();
        });
    }
}