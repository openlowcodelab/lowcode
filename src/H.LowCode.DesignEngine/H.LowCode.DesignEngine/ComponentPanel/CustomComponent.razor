@inject DragDropService DragDropService

@foreach(var item in DragItems)
{
    <DragItem ComponentSchema="item" OnItemDragStart="OnItemDragStart"></DragItem>
}

@code {
    internal List<ComponentSchema> DragItems = new List<ComponentSchema>()
        {
            new ComponentSchema(){
                ComponentJSchema = new Newtonsoft.Json.Schema.JSchema(){ Title = "HTML" },
                ComponentType = "html",
                ComponentPropertySchema = new HtmlPropertyModel(),
                DropRenderFragment = (builder) =>
                {
                    builder.OpenComponent(0, typeof(TextArea));
                    builder.AddAttribute(1, "style", "height:55px;");
                    builder.CloseComponent();
                }
            },
            new ComponentSchema(){
                ComponentJSchema = new JSchema(){ Title = "用户选择" },
                ComponentType = "userselect",
                DropRenderFragment = (builder) => {
                    builder.OpenComponent(0, typeof(Input<string>));
                    builder.CloseComponent();
                }
            },
            new ComponentSchema(){
                ComponentJSchema = new JSchema(){ Title = "行政区划" },
                ComponentType = "region",
                DropRenderFragment = (builder) => {
                    builder.OpenComponent(0, typeof(Input<string>));
                    builder.CloseComponent();
                }
            },
            new ComponentSchema(){
                ComponentJSchema = new JSchema(){ Title = "地图" },
                ComponentType = "map",
                DropRenderFragment = (builder) => {
                    builder.OpenComponent(0, typeof(Input<string>));
                    builder.CloseComponent();
                }
            }
        };

    public void OnItemDragStart(ComponentSchema componentSchema)
    {
        DragDropService.CurrentDragComponent = componentSchema;
    }
}
