<div class="componentproperty-item">
    <label>Name <span style="font-size:10px; color:gray;">(字段名称/英文)</span>：</label>
    <Input TValue="string" @bind-Value="@ComponentSchema.ComponentPropertySchema.Name" OnChange="(value) => OnPropertyChange()" />
</div>
<div class="componentproperty-item">
    <label>标题：</label>
    <Input TValue="string" @bind-Value="@ComponentSchema.ComponentPropertySchema.Title" OnChange="(value) => OnPropertyChange()" />
</div>
<div class="componentproperty-item">
    <label>描述：</label>
    <Input TValue="string" @bind-Value="@ComponentSchema.ComponentPropertySchema.Description" />
</div>
<div class="componentproperty-item">
    <label>默认值：</label>
    <Input TValue="string" @bind-Value="@ComponentSchema.ComponentPropertySchema.DefaultValue" />
</div>
@if (ComponentSchema.IsShowProperty("IsRequired"))
{
    <div class="componentproperty-item">
        <label>必填：</label>
        <Checkbox @bind-Value="@ComponentSchema.ComponentPropertySchema.IsRequired" OnChange="(value) => OnPropertyChange()" />
    </div>
}

@*"type": "string"*@
@if(ComponentSchema.ComponentPropertySchema.ComponentValueType == ComponentValueType.String)
{
    if (ComponentSchema.IsShowProperty("MaximumLength"))
    {
        <div class="componentproperty-item">
            <label>最大长度：</label>
            <Input TValue="long?" @bind-Value="@ComponentSchema.ComponentPropertySchema.MaximumLength" OnChange="(value) => OnPropertyChange()" />
        </div>
    }
    if (ComponentSchema.IsShowProperty("MinimumLength"))
    {
        <div class="componentproperty-item">
            <label>最小长度：</label>
            <Input TValue="long?" @bind-Value="@ComponentSchema.ComponentPropertySchema.MinimumLength" OnChange="(value) => OnPropertyChange()" />
        </div>
    }
    if (ComponentSchema.IsShowProperty("Pattern"))
    {
        <div class="componentproperty-item">
            <label>Pattern：</label>
            <Input TValue="string" @bind-Value="@ComponentSchema.ComponentPropertySchema.Pattern" OnChange="(value) => OnPropertyChange()" />
        </div>
    }
    if (ComponentSchema.IsShowProperty("Format"))
    {
        <div class="componentproperty-item">
            <label>Format：</label>
            <Input TValue="string" @bind-Value="@ComponentSchema.ComponentPropertySchema.Format" OnChange="(value) => OnPropertyChange()" />
        </div>
    }
}

@*"type": "integer"*@
@*"type": "number"*@
@if (ComponentSchema.ComponentPropertySchema.ComponentValueType == ComponentValueType.Integer || ComponentSchema.ComponentPropertySchema.ComponentValueType == ComponentValueType.Number)
{
    if (ComponentSchema.IsShowProperty("Maximum"))
    {
        <div class="componentproperty-item">
            <label>最大值：</label>
            <Input TValue="double?" @bind-Value="@ComponentSchema.ComponentPropertySchema.Maximum" OnChange="(value) => OnPropertyChange()" />
        </div>
    }
    if (ComponentSchema.IsShowProperty("Minimum"))
    {
        <div class="componentproperty-item">
            <label>最小值：</label>
            <Input TValue="double?" @bind-Value="@ComponentSchema.ComponentPropertySchema.Minimum" OnChange="(value) => OnPropertyChange()" />
        </div>
    }
}
@*"type": "array"*@
@*if(ComponentSchema.ComponentValueType == ComponentValueType.Array)
{
        
}*@

@*自定义*@
<div class="componentproperty-item">
    <label>组件宽度：</label>
    <Slider TValue="double" @bind-Value="@ComponentSchema.ComponentPropertySchema.ItemWidth" DefaultValue="12" Min="4" Max="24" OnChange="(value) => OnPropertyChange()" />
</div>
<div class="componentproperty-item">
    <label>标签宽度：</label>
    <Slider TValue="double" @bind-Value="@ComponentSchema.ComponentPropertySchema.LabelWidth" DefaultValue="180" Min="4" Max="300" OnChange="(value) => OnPropertyChange()" />
</div>

@code {
    [Parameter]
    public ComponentSchema ComponentSchema { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (ComponentSchema == null)
            throw new NullReferenceException($"{ComponentSchema} is null");
    }

    private void OnPropertyChange()
    {
        BlazorEventDispatcher.Dispatch("designerengine.componentproperty.onchange", null);
    }
}
