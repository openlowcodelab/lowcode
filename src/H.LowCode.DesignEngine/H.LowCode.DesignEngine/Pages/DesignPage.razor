@page "/designer/{AppId}/{PageId}"
@using System.Net.Http.Json
@using System.Net
@using System.Text.Json.Serialization
@using H.Extensions.System

@layout DesignerLayout
@inject HttpClient HttpClient

<AntDesign.Layout Class="designpage" Style="padding:5px 2px 10px; background-color: #f7f7f7;">
    <Header Style="background-color: white; padding:0 20px;">
        <div style="float:left;">
            <a href="javascript:void(0)"> @("<") 返回 </a>
        </div>
        @*<div style="text-align:center;">
            <Menu Theme="MenuTheme.Light" Mode="MenuMode.Horizontal" DefaultSelectedKeys=@(new[]{"2"})>
                <MenuItem Key="1">PC</MenuItem>
                <MenuItem Key="2">Mobile</MenuItem>
            </Menu>
        </div>*@
        <div style="float:right;">
            <Button>预览</Button>
            <Button Type="primary" OnClick="() => SaveMetadata()">保存</Button>
        </div>
    </Header>
    <AntDesign.Layout>
        <Sider Style="flex: auto; max-width: max-content; min-width: 200px;" Theme="SiderTheme.Light">
            <ComponentPanel></ComponentPanel>
        </Sider>
        <Content Class="designpage">
            <DesignPanel ComponentSchemas="@ComponentSchemas"></DesignPanel>
        </Content>
        <Sider Class="designpage" Style="flex: auto; max-width: max-content; min-width: 250px;" Theme="SiderTheme.Light">
            <PropertyPanel></PropertyPanel>
        </Sider>
    </AntDesign.Layout>
</AntDesign.Layout>

@code
{
    [Parameter]
    public string AppId { get; set; }

    [Parameter]
    public string PageId { get; set; }

    private List<ComponentSchema> ComponentSchemas = new List<ComponentSchema>();

    public async void SaveMetadata()
    {
        PageSchema pageSchema = GetPageSchema();

        //PostAsJsonAsync
        //var result = await HttpClient.PostAsJsonAsync("api/Designer/SaveMetadata", pageSchema);

        string jsonData = pageSchema.ToJson();
        //PostAsync
        var httpContent = new FormUrlEncodedContent(new List<KeyValuePair<string, string>>() { new KeyValuePair<string, string>("pageSchema", jsonData) });
        var result = await HttpClient.PostAsync("api/Designer/SaveMetadata", httpContent);

        //PostAsync
        //var httpContent2 = new StringContent(jsonData, Encoding.UTF8, "application/json");
        //var result2 = await HttpClient.PostAsync("api/Designer/SaveMetadata2", httpContent2);

        if (result.StatusCode == HttpStatusCode.OK)
        {
            var responseJson = await result.Content.ReadAsStringAsync();
        }
    }

    private PageSchema GetPageSchema()
    {
        PageSchema pageSchema = new PageSchema();
        pageSchema.ComponentSchemas = ComponentSchemas.Select(t => t.ComponentPropertySchema).ToList();
        pageSchema.DataSource = new DataSource() { DataSourceType = DataSourceType.Api };
        return pageSchema;
    }
}